//
//  LoginPresenter.swift
//  SegurosMtyiOS
//
//  Created by Isidro Adan Garcia Solorio  on 12/1/17.
//  Copyright (c) 2017 IA Interactive. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

protocol LoginPresentationLogic {
    func presentPhoneNumberValidation(response: Login.ValidatePhoneNumber.Response)
    func presentPasswordValidation(validationState: TextFieldValidationState)
    func presentLogin(response: Login.Login.Response)
}

class LoginPresenter: LoginPresentationLogic {
    weak var viewController: LoginDisplayLogic?
    
    // MARK: - Presenter Methods
    /**
     Presenta el resultado de la validación del numero telefonico, realiza la preparación adecuada dependiendo si es un dato válido o no.
     */
    func presentPhoneNumberValidation(response: Login.ValidatePhoneNumber.Response) {
        
        var validationState:TextFieldValidationState = .notValidated
        var message:String?
        var phoneNumber:String = response.phoneNumber
        
        if let error = response.error {
            switch error {
            case NetworkingError.noInternet:
                message = LocalizableKeys.General.noInternet
            case NetworkingError.unknown:
                 message = LocalizableKeys.General.serviceError
            case WorkerError.noInput:
                validationState = .invalid(message: LocalizableKeys.Login.emptyNumber)
            default:
                validationState = .invalid(message: LocalizableKeys.Login.invalidNumber)
            }
            
        } else {
            phoneNumber = Util.getMaskedPhoneNumber(response.phoneNumber)
            validationState = .valid(message: String(format: LocalizableKeys.Login.welcomeUsername, response.userName))
        }
        let viewModel = Login.ValidatePhoneNumber.ViewModel(phoneNumber: phoneNumber, validationState: validationState, isFirstEntry: response.isFirstEntry, alertString: message)
        viewController?.displayPhoneNumberValidation(viewModel: viewModel)
    }
    
    /**
     Presenta el resultado de la validación la contraseña, realiza la preparación adecuada dependiendo si es un dato válido o no.
     */
    func presentPasswordValidation(validationState: TextFieldValidationState) {
        viewController?.displayPasswordValidation(validationState: validationState)
    }
    
    func presentLogin(response: Login.Login.Response) {
        var loginStatus: LoginStatus = .ok
        
        if let error = response.error {
            switch error {
            case LoginError.unsuccessfulLogin(let status):
                loginStatus = status
            case WorkerError.invalidInput, WorkerError.noInput:
                loginStatus = .invalidInput
            case NetworkingError.noInternet:
                loginStatus = .other(message: LocalizableKeys.General.noInternet)
            default:
                loginStatus = .other(message: LocalizableKeys.General.serviceError)
            }
        }
        
        let viewModel =  Login.Login.ViewModel(status: loginStatus)
        viewController?.displayLogin(viewModel: viewModel)
    }
}
