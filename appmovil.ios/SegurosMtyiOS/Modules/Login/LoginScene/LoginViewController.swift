//
//  LoginViewController.swift
//  SegurosMtyiOS
//
//  Created by Isidro Adan Garcia Solorio  on 12/1/17.
//  Copyright (c) 2017 IA Interactive. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginDisplayLogic: class {
    func displayPhoneNumberValidation(viewModel: Login.ValidatePhoneNumber.ViewModel)
    func displayPasswordValidation(validationState: TextFieldValidationState)
    func displayLogin(viewModel: Login.Login.ViewModel)
}

class LoginViewController: UIViewController {
    var interactor: LoginBusinessLogic?
    var router: (NSObjectProtocol & LoginRoutingLogic & LoginDataPassing)?
    
    @IBOutlet weak var phoneNumberText: FloatingTextField!
    @IBOutlet weak var passwordText: FloatingTextField!
    @IBOutlet weak var termsAndConditionsView: UIView!
    @IBOutlet weak var loginAttemptsView: UIView!
    @IBOutlet weak var loginAttemptLabel: UILabel!
    
    private var isValidNumber: Bool = false
    private var isValidPassword: Bool = false
    
    // MARK: - Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: - Setup
    
    private func setup() {
        let viewController = self
        let interactor = LoginInteractor()
        let presenter = LoginPresenter()
        let router = LoginRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: - View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        self.phoneNumberText.delegate = self
        self.passwordText.delegate = self
        setupUI()
        interactor?.preloadData()
    }
    
    private func setupUI() {
        
        self.loginAttemptsView.layer.cornerRadius = 11
        self.loginAttemptsView.layer.borderWidth = 1
        self.loginAttemptsView.layer.borderColor = UIColor.smPinkish.withAlphaComponent(0.3).cgColor
        self.loginAttemptsView.isHidden = true
        
        if let phoneNumber = KeychainManager.shared.phoneNumber {
            self.phoneNumberText.text = phoneNumber
            self.phoneNumberText.isValidating = true
            self.phoneNumberText.titleText.alpha = 1
            self.phoneNumberText.titleText.transform = CGAffineTransform.identity.translatedBy(x: 0, y: 0)
        }
    }
    
    // MARK: - Actions
    @IBAction func loginPressed(_ sender: UIButton) {
        self.view.endEditing(true)
    
        if isValidNumber && isValidPassword {
        
            IALoader.shared.show(LocalizableKeys.Loader.login)
            interactor?.login()
            
        } else {
            interactor?.validatePassword(passwordText.text)
            interactor?.validatePhoneNumber(phoneNumberText.text)
        }
    }
    @IBAction func resetPasswordPressed(_ sender: UIButton) {
        self.router?.goToRecoverPasswordViewController(type: .reset)
    }
    
}

// MARK: - LoginDisplayLogic
extension LoginViewController : LoginDisplayLogic {
    func displayPhoneNumberValidation(viewModel: Login.ValidatePhoneNumber.ViewModel) {
        self.phoneNumberText.validate { viewModel.validationState }
        self.phoneNumberText.text = viewModel.phoneNumber
        
        self.loginAttemptsView.isHidden = true
        
        switch viewModel.validationState {
        case .valid:
            self.termsAndConditionsView.isHidden = !viewModel.isFirstEntry
            self.isValidNumber = true
        default:
            self.termsAndConditionsView.isHidden = true
        }
        
        if let alertString = viewModel.alertString {
            self.showAlert(with: nil, message: alertString, actionTitle: LocalizableKeys.General.AlertOptions.accept, action: nil)
        }
    }
    
    func displayPasswordValidation(validationState: TextFieldValidationState) {
        self.passwordText.validate {
            
            switch validationState {
                
            case .valid:
                
                self.isValidPassword = true
                
            case .notValidated, .invalid:
                self.isValidPassword = false
                
            }
            
            return validationState
            
        }
    }
    
    func displayLogin(viewModel: Login.Login.ViewModel) {
        self.loginAttemptsView.isHidden = true
        IALoader.shared.hide()
        switch viewModel.status {
        case .ok:
            router?.goToMenu()
        case .invalidPassword(let reattempsLeft, let message):
            loginAttemptLabel.text = "Te restan \(reattempsLeft) intentos de 5"
            self.loginAttemptsView.isHidden = false
            self.termsAndConditionsView.isHidden = true
            self.showAlert(with: nil, message: message, actionTitle: LocalizableKeys.General.AlertOptions.accept, action: nil)
        
        case .recoverPassword(let type, let message):
            let alertTitle = type == .new ? LocalizableKeys.General.AlertOptions.generatePassword : LocalizableKeys.General.AlertOptions.resetPassword
            self.showAlert(with: nil, message: message, actionTitle: alertTitle, action: { (action) in
                self.router?.goToRecoverPasswordViewController(type: type)
            })
        
        case .activateAccount(let message):
            self.showAlert(with: nil, message: message, actionTitle: LocalizableKeys.General.AlertOptions.activateAccount, action: { (action) in
                self.router?.goToCheckCode(validationCodeProccessType: .activate)
            })
            
        case .invalidInput:
            self.interactor?.validatePhoneNumber(self.phoneNumberText.text)
            self.interactor?.validatePassword(self.passwordText.text)
            
        case .other(let message):
            self.showAlert(with: nil, message: message, actionTitle: LocalizableKeys.General.AlertOptions.accept, action: nil)
        }
    }
}

// MARK: - FloatingTextFieldDelegate
extension LoginViewController : FloatingTextFieldDelegate  {
    func textFieldShouldReturn(_ textField: FloatingTextField) { }
    
    func textFieldDidBeginEditing(_ textField: FloatingTextField){
       self.passwordText.hideTooltip()
        
    }
    
    func textFieldDidEndEditing(_ textField: FloatingTextField){
        switch textField {
        case self.phoneNumberText:
            self.phoneNumberText.isValidating = true
            self.isValidNumber = false
            interactor?.validatePhoneNumber(textField.text)
        default:
            interactor?.validatePassword(textField.text)
        }
    }
}

// MARK: - Touch managment
extension LoginViewController {
    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
        super.touchesBegan(touches, with: event)
       
        let touch = touches.first
        if touch?.view != self.passwordText {
            self.passwordText.hideTooltip()
        }
    }
}
