//
//  RenewPasswordInteractor.swift
//  SegurosMtyiOS
//
//  Created by Erwin Perez Tellez on 09/12/17.
//  Copyright (c) 2017 IA Interactive. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import RxSwift

protocol RenewPasswordBusinessLogic {
    func validatePassword(_ password: String)
    func confirmPassword(_ value: String?)
    func assignNewPassword()
    func login()
}

protocol RenewPasswordDataStore {
    var phoneNumber: String { get set }
    var smsCode: String { get set }
    var serverTimestamp: Int? { get set }
}

class RenewPasswordInteractor: RenewPasswordBusinessLogic, RenewPasswordDataStore {
    var presenter: RenewPasswordPresentationLogic?
    
    var worker: RenewPasswordWorker?
    
    // MARK: DataStore
    var phoneNumber: String = ""
    var smsCode: String = ""
    var password: String?
    var confirmPassword: String?
    var isSamePassword: Bool = false
    var disposableBag: DisposeBag = DisposeBag()
    var serverTimestamp: Int?
    
    //MARK: RenewPasswordBusinessLogic
    /**
     Es disparado cuando se necesita validar la contraseña que será añadida al usuario
     - parameter password: contraseña a validar.
     */
    func validatePassword(_ password: String) {
        let worker = LoginWorker()
        let result = worker.validatePassword(password)
        self.password = password
        self.confirmPassword(confirmPassword)
        
        self.presenter?.presentPasswordValidation(validationState: result)
    }
    
    /**
     Función que valida si son las mismas contraseñas
     - parameter value: contraseña por confirmar
     */
    func confirmPassword(_ value: String?) {
        if worker == nil {
            worker = RenewPasswordWorker()
        }
        
        if let result = worker?.validPasswords(self.password ?? "", confirmPassword: value ?? "") {
            switch result{
            case .valid:
                self.confirmPassword = value
                self.isSamePassword = true
            default:
                self.isSamePassword = false
                
            }
            self.presenter?.presentConfirmValidateConfirmPassword(validationState: result)
        }
    }
    
    /**
     Función que que hará la petición para asignar la contraseña
     */
    func assignNewPassword() {
        if worker == nil {
            worker = RenewPasswordWorker()
        }
        
        self.validatePassword(self.password ?? "")
        
        guard isSamePassword else { return }
        
        
        worker?.renewPassword(self.phoneNumber, password: self.password ?? "", smsCode: self.smsCode, timestamp: self.serverTimestamp).subscribe({ [weak self] event in
            switch event {
            case .next(_):
                let response = RenewPassword.RenewPAssword.Response(error: nil)
                self?.presenter?.presentRenewPassword(response: response)
            case .error(let error):
                let response = RenewPassword.RenewPAssword.Response(error: error)
                self?.presenter?.presentRenewPassword(response: response)
            default:
                break
            }
        }).disposed(by: self.disposableBag)
    }
    
    /**
     Es disparado cuando se necesita realizar un inicio de sesión
     */
    func login() {
        let loginWorker = LoginWorker()
        
        loginWorker.login(phoneNumber: self.phoneNumber, password: password ?? "").subscribe({ [weak self] event in
            var resultError:Error?
            switch event {
            case .next(let result):
                loginWorker.saveLoggedInUser(response: result, phoneNumber: self?.phoneNumber ?? "")
            case .error(let error):
                resultError = error
            default:
                break
            }
            let response = Login.Login.Response(error: resultError)
            self?.presenter?.presentLogin(response: response)
            
        }).disposed(by: self.disposableBag)
    }
}
