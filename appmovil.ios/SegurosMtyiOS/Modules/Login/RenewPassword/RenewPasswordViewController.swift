//
//  RenewPasswordViewController.swift
//  SegurosMtyiOS
//
//  Created by Erwin Perez Tellez on 09/12/17.
//  Copyright (c) 2017 IA Interactive. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol RenewPasswordDisplayLogic: class {
    func displayPasswordValidation(validationState: TextFieldValidationState)
    func displayConfirmPasswordValidation(validationState: TextFieldValidationState)
    func displayRenewPassword(viewModel: RenewPassword.RenewPAssword.ViewModel)
    func displayLogin(viewModel: Login.Login.ViewModel)
}

class RenewPasswordViewController: UIViewController, RenewPasswordDisplayLogic {
    var interactor: RenewPasswordBusinessLogic?
    var router: (NSObjectProtocol & RenewPasswordRoutingLogic & RenewPasswordDataPassing)?
    
    @IBOutlet weak var password: FloatingTextField!
    @IBOutlet weak var confirmPassword: FloatingTextField!
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = RenewPasswordInteractor()
        let presenter = RenewPasswordPresenter()
        let router = RenewPasswordRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
        
        self.password.delegate = self
        self.confirmPassword.delegate = self
    }
    
    private func setupUI() {
        self.confirmPassword.isTooltipHidden = true
    }
    
    // MARK: Do something
    @IBAction func assignPassword(_ sender: Any) {
        self.view.endEditing(true)
        
        if self.password.text == "" {
            displayPasswordValidation(validationState: .invalid(message: LocalizableKeys.Profile.EditPassword.errorEmptyPassword))
            
            if self.confirmPassword.text == "" {
                displayConfirmPasswordValidation(validationState: .invalid(message: LocalizableKeys.RenewPassword.notSamePasswords))
                return
            }
            
            return
        }else if self.confirmPassword.text == "" {
            displayConfirmPasswordValidation(validationState: .invalid(message: LocalizableKeys.RenewPassword.notSamePasswords))
            return
        }
        
        interactor?.assignNewPassword()
    }
    
    func displayPasswordValidation(validationState: TextFieldValidationState) {
        self.password.validate { validationState }
    }
    
    func displayConfirmPasswordValidation(validationState: TextFieldValidationState) {
        self.confirmPassword.validate { validationState }
    }
    
    func displayRenewPassword(viewModel: RenewPassword.RenewPAssword.ViewModel) {
        IALoader.shared.hide()
        switch viewModel.status {
        case .success(let message):
            self.showAlert(with: nil, message: message, actionTitle: LocalizableKeys.General.AlertOptions.login, action: { (action) in
                IALoader.shared.show(LocalizableKeys.Loader.login)
                self.interactor?.login()
            })
        case .invalidPhoneOrCode(let message):
            self.showAlert(with: nil, message: message, actionTitle: LocalizableKeys.General.AlertOptions.accept, action: nil)
        case .errorWithData(let message):
            self.showAlert(with: nil, message: message, actionTitle: LocalizableKeys.General.AlertOptions.accept, action: nil)
        case .invalidInputs:
            interactor?.validatePassword(password.text)
            interactor?.confirmPassword(confirmPassword.text)
        case .other(let message):
            self.showAlert(with: nil, message: message, actionTitle: LocalizableKeys.General.AlertOptions.accept, action: nil)
        }
    }
    
    func displayLogin(viewModel: Login.Login.ViewModel) {
        IALoader.shared.hide()
        switch viewModel.status {
        case .ok:
            router?.goToMenu()
        case .other(let message):
            self.showAlert(with: nil, message: message, actionTitle: LocalizableKeys.General.AlertOptions.accept, action: nil)
        default:
            break
        }
    }
}
// MARK: - FloatingTextFieldDelegate
extension RenewPasswordViewController : FloatingTextFieldDelegate  {
    func textFieldShouldReturn(_ textField: FloatingTextField) {
        
    }
    
    func textFieldDidBeginEditing(_ textField: FloatingTextField){
         self.password.hideTooltip()
    }
    
    func textFieldDidEndEditing(_ textField: FloatingTextField){
        switch textField {
        case self.confirmPassword:
            interactor?.confirmPassword(textField.text)
        default:
            interactor?.validatePassword(textField.text)
        }
    }
}
