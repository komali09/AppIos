//
//  RenewPasswordPresenter.swift
//  SegurosMtyiOS
//
//  Created by Erwin Perez Tellez on 09/12/17.
//  Copyright (c) 2017 IA Interactive. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

protocol RenewPasswordPresentationLogic {
    func presentPasswordValidation(validationState: TextFieldValidationState)
    func presentConfirmValidateConfirmPassword(validationState: TextFieldValidationState)
    func presentRenewPassword(response: RenewPassword.RenewPAssword.Response)
    func presentLogin(response: Login.Login.Response)
}

class RenewPasswordPresenter: RenewPasswordPresentationLogic {
    weak var viewController: RenewPasswordDisplayLogic?
    
    // MARK: RenewPasswordPresentationLogic
    /**
     Presenta el resultado de la validación la contraseña, realiza la preparación adecuada dependiendo si es un dato válido o no.
     */
    func presentPasswordValidation(validationState: TextFieldValidationState) {
        viewController?.displayPasswordValidation(validationState: validationState)
    }
    
    /**
     Presenta el resultado de la validación la contraseña, realiza la preparación adecuada dependiendo si es un dato válido o no.
     */
    func presentConfirmValidateConfirmPassword(validationState: TextFieldValidationState) {
        viewController?.displayConfirmPasswordValidation(validationState: validationState)
    }
    
    /**
     Presenta el resultado de la asignación de la nueva contraseña
     */
    func presentRenewPassword(response: RenewPassword.RenewPAssword.Response) {
        var status: RenewPasswordStatus = .success(message: LocalizableKeys.RenewPassword.success)
        
        if let error = response.error {
            switch error {
            case NetworkingError.noSuccessStatusCode(let code, _):
                switch code {
                case 1: // Número de teléfono o código invalidos
                    status = .invalidPhoneOrCode(message: LocalizableKeys.VerifyCode.invalidPhoneNumberOrCode)
                case 4: // Errores en los datos
                    status = .errorWithData(message: LocalizableKeys.VerifyCode.errorWithData)
                default:
                    status = .other(message: LocalizableKeys.General.serviceError)
                }
            case NetworkingError.noInternet:
                status = .other(message: LocalizableKeys.General.noInternet)
            default:
                status = .other(message: LocalizableKeys.General.serviceError)
            }
        }
        
        let viewModel =  RenewPassword.RenewPAssword.ViewModel(status: status)
        viewController?.displayRenewPassword(viewModel: viewModel)
    }
    
    func presentLogin(response: Login.Login.Response) {
        var loginStatus: LoginStatus = .ok
        
        if let error = response.error {
            switch error {
            case LoginError.unsuccessfulLogin(let status):
                loginStatus = status
            case WorkerError.invalidInput:
                loginStatus = .invalidInput
            case NetworkingError.noInternet:
                loginStatus = .other(message: LocalizableKeys.General.noInternet)
            default:
                loginStatus = .other(message: LocalizableKeys.General.serviceError)
            }
        }
        
        let viewModel =  Login.Login.ViewModel(status: loginStatus)
        viewController?.displayLogin(viewModel: viewModel)
    }
}
