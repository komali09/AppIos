//
//  RecoverPasswordViewController.swift
//  SegurosMtyiOS
//
//  Created by Erwin Jonnatan Perez Téllez on 06/12/17.
//  Copyright (c) 2017 IA Interactive. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol RecoverPasswordDisplayLogic: class {
    func displayPhoneNumberValidation(viewModel: RecoverPassword.ValidatePhoneNumber.ViewModel)
}

class RecoverPasswordViewController: UIViewController, RecoverPasswordDisplayLogic {
    var interactor: RecoverPasswordBusinessLogic?
    var router: (NSObjectProtocol & RecoverPasswordRoutingLogic & RecoverPasswordDataPassing)?
    
    @IBOutlet weak var phoneNumberText: FloatingTextField!
    @IBOutlet weak var titleProccess: UILabel!
    @IBOutlet weak var continueProccess: IAGradientButton!
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = RecoverPasswordInteractor()
        let presenter = RecoverPasswordPresenter()
        let router = RecoverPasswordRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
        self.phoneNumberText.delegate = self
        interactor?.preloadData()
    }
    
    private func setupUI() {
        if router?.dataStore?.recoverPasswordType == .reset {
            self.titleProccess.text = "Recuperar contraseña"
            self.continueProccess.setTitle("Recuperar contraseña", for: .normal)
        } else {
            self.titleProccess.text = "Generar contraseña"
            self.continueProccess.setTitle("Generar contraseña", for: .normal)
        }
    }
    
    // MARK: displayPhoneNumberValidation
    func displayPhoneNumberValidation(viewModel: RecoverPassword.ValidatePhoneNumber.ViewModel) {
        self.phoneNumberText.validate { viewModel.validationState }
        self.phoneNumberText.text = viewModel.phoneNumber
        
        if let alertString = viewModel.alertString {
            self.showAlert(with: nil, message: alertString, actionTitle: LocalizableKeys.General.AlertOptions.accept, action: nil)
        }
    }
    
    @IBAction func recoverPasswordPressed(_ sender: Any) {
        self.view.endEditing(true)
        if phoneNumberText.text.isEmpty {
            self.phoneNumberText.validate { .invalid(message: LocalizableKeys.Login.invalidNumber) }
        } else {
            router?.goToCheckCode(validationCodeProccessType: .recovery)
        }
    }    
}

// MARK: - FloatingTextFieldDelegate
extension RecoverPasswordViewController : FloatingTextFieldDelegate  {
    func textFieldShouldReturn(_ textField: FloatingTextField) {}
    
    func textFieldDidBeginEditing(_ textField: FloatingTextField){
       debugPrint("begin Editing")
    }
    
    func textFieldDidEndEditing(_ textField: FloatingTextField){
        switch textField {
        case self.phoneNumberText:
            self.phoneNumberText.isValidating = true
            interactor?.validatePhoneNumber(textField.text)
        default:
           break
        }
    }
}
