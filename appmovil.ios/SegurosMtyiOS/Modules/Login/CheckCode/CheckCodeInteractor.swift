//
//  CheckCodeInteractor.swift
//  SegurosMtyiOS
//
//  Created by Erwin Jonnatan Perez Téllez on 07/12/17.
//  Copyright (c) 2017 IA Interactive. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
import RxSwift

protocol CheckCodeBusinessLogic {
    func requestCode()
    func verifyCode()
    func validateCode(_ code: String)
    func login()
}

protocol CheckCodeDataStore {
    var validationCodeProccessType: ValidationCodeProccessType { get set }
    var phoneNumber: String { get set }
    var password: String { get set }
    var smsCode: String { get set }
    var serverTimestamp: Int? { get set }
}

class CheckCodeInteractor: CheckCodeBusinessLogic, CheckCodeDataStore {
    
    var presenter: CheckCodePresentationLogic?
    var worker: CheckCodeWorker?
    
    var disposableBag: DisposeBag = DisposeBag()
    var code:String?
    // MARK: DataStore
    var validationCodeProccessType: ValidationCodeProccessType = .recovery
    var phoneNumber: String = ""
    var password: String = ""
    var smsCode: String = ""
    var serverTimestamp: Int?
    var isActionTresholdActive: Bool = false
    
    // MARK: Do something
    func requestCode() {
        if isActionTresholdActive { return }
        isActionTresholdActive = true
        Timer.scheduledTimer(withTimeInterval: 2.0, repeats: false, block: { [unowned self] timer in
            self.isActionTresholdActive = false
        })
        debugPrint("requestCode!!")
        switch self.validationCodeProccessType {
        case .activate:
            self.generateCodeToActiveAccount()
        case .recovery:
            self.generateCodeToRecoverPassword()
        }
    }
    
    /**
     Función que pide generar una llave pública donde se inicia el proceso de recuperar contraseña
     */
    func generateCodeToRecoverPassword() {
        if worker == nil {
            worker = CheckCodeWorker()
        }
        worker?.generateCodeToRecoverPassword(self.phoneNumber)
            .subscribe(generateCodeResponseHandler(_:))
            .disposed(by: self.disposableBag)
    }
    
    /**
     Función que pide generar una llave pública donde se inicia el proceso de generar contraseña
     */
    func generateCodeToActiveAccount() {
        if worker == nil {
            worker = CheckCodeWorker()
        }
        worker?.generateCodeToActiveAccount(self.phoneNumber)
            .subscribe(generateCodeResponseHandler(_:))
            .disposed(by: self.disposableBag)
    }
    
    func generateCodeResponseHandler(_ event: Event<GenerateCodeResponse>) {
        switch event {
        case .next(let result):
            self.serverTimestamp = result.timestamp
            let response = RecoverPassword.GenerateCodeToRecoverPassword.Response(error: nil)
            self.presenter?.presentRequestCode(response: response)
        case .error(let error):
            let response = RecoverPassword.GenerateCodeToRecoverPassword.Response(error: error)
            self.presenter?.presentRequestCode(response: response)
        default:
            break
        }
    }
    
    /**
     Es disparado cuando se necesita validar la codigo recibido
     - parameter code: codigo a validar.
     */
    func validateCode(_ code: String) {
        if worker == nil {
            worker = CheckCodeWorker()
        }
        
        if let result = worker?.validateCode(code) {
            switch result{
            case .valid:
                self.code = code
            default:
                self.code = nil
            }
            self.presenter?.presentCodeValidation(validationState: result)
        }
    }
    
    /**
     Método que verificará el código ingresado por el usuario
     */
    func verifyCode() {
        guard let code = self.code else {
            self.validateCode("")
            return
        }
        
        if worker == nil {
            worker = CheckCodeWorker()
        }
        worker?.verifyCode(self.phoneNumber, code: code, timestamp: self.serverTimestamp, validationCodeProccessType: self.validationCodeProccessType).subscribe({ [weak self] event in
            var resultError:Error?
            switch event {
            case .next(let result):
                self?.serverTimestamp = result.timestamp ?? 0
                self?.smsCode = result.code ?? ""
            case .error(let error):
                 resultError = error
            default:
                break
            }
            
            let response = CheckCode.VerifyCode.Response(error: resultError, validationCodeProccessType: self?.validationCodeProccessType ?? .recovery)
            self?.presenter?.presentVerifyCode(response: response)
            
        }).disposed(by: self.disposableBag)
    }
    
    /**
     Es disparado cuando se necesita realizar un inicio de sesión
     */
    func login() {
        let loginWorker = LoginWorker()
        
        loginWorker.login(phoneNumber: self.phoneNumber, password: password).subscribe({ [weak self] event in
            var resultError:Error?
            switch event {
            case .next(let result):
                loginWorker.saveLoggedInUser(response: result, phoneNumber: self?.phoneNumber ?? "")
            case .error(let error):
                resultError = error
            default:
                break
            }
            let response = Login.Login.Response(error: resultError)
            self?.presenter?.presentLogin(response: response)
            
        }).disposed(by: self.disposableBag)
    }
}
