//
//  CheckCodePresenter.swift
//  SegurosMtyiOS
//
//  Created by Erwin Jonnatan Perez Téllez on 07/12/17.
//  Copyright (c) 2017 IA Interactive. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

protocol CheckCodePresentationLogic {
    func presentRequestCode(response: RecoverPassword.GenerateCodeToRecoverPassword.Response)
    func presentCodeValidation(validationState: TextFieldValidationState)
    func presentVerifyCode(response: CheckCode.VerifyCode.Response)
    func presentLogin(response: Login.Login.Response)
}

class CheckCodePresenter: CheckCodePresentationLogic {
    weak var viewController: CheckCodeDisplayLogic?
    
    // MARK: Do something    
    func presentRequestCode(response: RecoverPassword.GenerateCodeToRecoverPassword.Response) {
        var success: Bool = true
        var message: String?
        
        if let error = response.error {
            success = false
            switch error {
            case NetworkingError.noSuccessStatusCode(let code, _):
                switch code {
                case 1: // El número de teléfono es incorrecto
                    message = LocalizableKeys.RecoverPassword.invalidPhoneNumber
                case 2: // El SMS esta activo
                    message = LocalizableKeys.RecoverPassword.sentSMS
                default:
                    message = LocalizableKeys.General.serviceError
                }
            case NetworkingError.noInternet:
                message = LocalizableKeys.General.noInternet
            default:
                message = LocalizableKeys.General.serviceError
            }
        }
        
        let viewModel = RecoverPassword.GenerateCodeToRecoverPassword.ViewModel(success: success, message: message)
        
        viewController?.displayRequestCode(viewModel: viewModel)
    }
    
    /**
     Presenta el resultado de la validación la codigo, realiza la preparación adecuada dependiendo si es un dato válido o no.
     */
    func presentCodeValidation(validationState: TextFieldValidationState) {
        viewController?.displayCodeValidation(validationState: validationState)
    }
    
    /**
     Presenta el resultado de la verificación del código por SMS
     */
    func presentVerifyCode(response: CheckCode.VerifyCode.Response) {
        var status: VerifyCodeStatus = .success(message: LocalizableKeys.VerifyCode.success)
        
        if let error = response.error {
            switch error {
            case NetworkingError.noSuccessStatusCode(let code, _):
                switch code {
                case 1: // Número de teléfono o código invalidos
                     status = .invalidPhoneOrCode(message: LocalizableKeys.VerifyCode.invalidPhoneNumberOrCode)
                case 3: // Errores en los datos
                    status = .errorWithData(message: LocalizableKeys.VerifyCode.errorWithData)
                default:
                    status = .other(message: LocalizableKeys.General.serviceError)
                }
            case NetworkingError.noInternet:
                status = .other(message: LocalizableKeys.General.noInternet)
            default:
                status = .other(message: LocalizableKeys.General.serviceError)
            }
        }
        
        let viewModel =  CheckCode.VerifyCode.ViewModel(status: status, validationCodeProccessType: response.validationCodeProccessType)
        viewController?.displayVerifyCode(viewModel: viewModel)
    }
    
    func presentLogin(response: Login.Login.Response) {
        var loginStatus: LoginStatus = .ok
        
        if let error = response.error {
            switch error {
            case LoginError.unsuccessfulLogin(let status):
                loginStatus = status
            case WorkerError.invalidInput:
                loginStatus = .invalidInput
            case NetworkingError.noInternet:
                loginStatus = .other(message: LocalizableKeys.General.noInternet)
            default:
                loginStatus = .other(message: LocalizableKeys.General.serviceError)
            }
        }
        
        let viewModel =  Login.Login.ViewModel(status: loginStatus)
        viewController?.displayLogin(viewModel: viewModel)
    }
}
