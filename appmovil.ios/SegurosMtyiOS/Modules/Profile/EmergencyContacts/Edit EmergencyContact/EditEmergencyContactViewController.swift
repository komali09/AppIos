//
//  EditEmergencyContactViewController.swift
//  SegurosMtyiOS
//
//  Created by Erwin Jonnatan Perez TÃ©llez on 08/01/18.
//  Copyright (c) 2018 IA Interactive. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RxSwift

protocol EditEmergencyContactDisplayLogic: class {
    func displaySetupEmergencyContact(viewModel: EditEmergencyContact.SetupEmergencycontact.ViewModel)
    func displayEditEmergencyContact(viewModel: EditEmergencyContact.EditEmergencyContact.ViewModel)
    func displayDeleteEmergencyContact(viewModel: EditEmergencyContact.DeleteEmergencyContact.ViewModel)
    func displaySavePictureEmergencyContact(viewModel: EditEmergencyContact.SavePictureEmergencyContact.ViewModel)
    func displayNameValidation(viewModel: EditEmergencyContact.ValidateName.ViewModel)
    func displayPhoneNumberValidation(viewModel: EditEmergencyContact.ValidatePhoneNumber.ViewModel)
    func displayEmailValidation(viewModel: EditEmergencyContact.ValidateEmail.ViewModel)
}

class EditEmergencyContactViewController: IAPopupViewController, ExpiredSessionDisplayLogic, ErrorDisplayLogic {
    var interactor: EditEmergencyContactBusinessLogic?
    var router: (NSObjectProtocol & EditEmergencyContactRoutingLogic & EditEmergencyContactDataPassing)?
    
    @IBOutlet weak var name: FloatingTextField!
    @IBOutlet weak var phone: FloatingTextField!
    @IBOutlet weak var email: FloatingTextField!
    
    @IBOutlet weak var picture: IAUIImageView!
    fileprivate var imagePicker = UIImagePickerController()
    fileprivate var imageChanged = false
    
    var isValidName = true
    var isValidPhone = true
    var isValidEmail = true
    
    var disposableBag: DisposeBag = DisposeBag()
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = EditEmergencyContactInteractor()
        let presenter = EditEmergencyContactPresenter()
        let router = EditEmergencyContactRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.name.delegate = self
        self.phone.delegate = self
        self.email.delegate = self
        setupEmergencyContact()
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        self.view.endEditing(true)
    }
    
    // MARK: Do something
    private func setupEmergencyContact() {
        interactor?.setupEmergencyContact()
    }
    
    @IBAction func backPressed(_ sender: Any) {
        self.router?.goToDetailEmergencyContact()
    }
    
    @IBAction func editOrAddPciture(_ sender: Any) {
        RequestResourcesManager.isAuthorizedToUseCamera().subscribe { (event) in
            switch event {
            case .next(let isAuthorized):
                self.requestPhotosLibrary(isAuthorizedCamera: isAuthorized)
            default:
                break
            }
        }.disposed(by: self.disposableBag)
    }
    
    private func requestPhotosLibrary(isAuthorizedCamera: Bool) {
        RequestResourcesManager.isAuthorizedToAccessPhotos().subscribe { (event) in
            switch event {
            case .next(let isAuthorized):
                 self.prepareUIImagePickerViewController(isAuthorizedCamera: isAuthorizedCamera, isAuthorizedPhotos: isAuthorized)
            default:
                break
            }
        }.disposed(by: self.disposableBag)
    }
    
    private func prepareUIImagePickerViewController(isAuthorizedCamera: Bool, isAuthorizedPhotos: Bool) {
        if isAuthorizedCamera == false && isAuthorizedPhotos == false {
            let alert = IABlurAlertController(title: nil, message: LocalizableKeys.General.openSettingsCameraAndGaleryPhotos, preferredStyle: .alert)
            
            alert.addAction(UIAlertAction(title: LocalizableKeys.General.AlertOptions.cancel, style: .default, handler: nil))
            
            alert.addAction(UIAlertAction(title: LocalizableKeys.General.AlertOptions.configuration, style: .default, handler: { (action) in
                if let appSettings = URL(string: UIApplicationOpenSettingsURLString) {
                    UIApplication.shared.open(appSettings, options: [:], completionHandler: { (completion) in
                        alert.dismiss(animated: true, completion: nil)
                    })
                }
            }))
            
            self.present(alert, animated: true, completion: nil)
            return
        }
        
        let actionSheet = UIAlertController(title: nil, message: nil, preferredStyle: .actionSheet)
        
        if isAuthorizedCamera {
            let cameraAction = UIAlertAction(title: "Tomar foto", style: .default, handler: { [unowned self] _ in
                if UIImagePickerController.isSourceTypeAvailable(.camera) {
                    self.imagePicker.delegate = self
                    self.imagePicker.sourceType = .camera
                    self.imagePicker.allowsEditing = false
                    self.present(self.imagePicker, animated: true, completion: nil)
                }
            })
            actionSheet.addAction(cameraAction)
        }
    
        if isAuthorizedPhotos {
            let libraryAction = UIAlertAction(title: "Seleccionar foto", style: .default, handler: { [unowned self] _ in
                if UIImagePickerController.isSourceTypeAvailable(.photoLibrary) {
                    self.imagePicker.delegate = self
                    self.imagePicker.sourceType = .photoLibrary
                    self.imagePicker.allowsEditing = false
                    
                    self.imagePicker.setCustomNavigation()
                    
                    self.present(self.imagePicker, animated: true, completion: nil)
                }
            })
            actionSheet.addAction(libraryAction)
        }

        let cancelAction = UIAlertAction(title: "Cancelar", style: .cancel, handler: nil)
        actionSheet.addAction(cancelAction)
        
        present(actionSheet, animated: true, completion: nil)
    }
    
    @IBAction func savePressed(_ sender: Any) {
        validName()
        validPhoneNumber()
        validEmail()
        
        if isValidName && isValidPhone && isValidEmail {
            if imageChanged {
                let request = EditEmergencyContact.SavePictureEmergencyContact.Request(picture: picture)
                interactor?.savePictureOfEmergencyContact(request: request)
            } else {
                let request = EditEmergencyContact.EditEmergencyContact.Request(emergencyContactID: self.router?.dataStore?.emergencyContact.ID ?? 0, picture: self.router?.dataStore?.emergencyContact.picture ?? "", name: self.name.text, phone: self.phone.text, email: self.email.text)
                interactor?.editEmergencyContact(request: request)
            }
        }
    }
    
    @IBAction func deletePressed(_ sender: Any) {
        let alertController = UIAlertController(title: nil, message: nil, preferredStyle: .actionSheet)
        
        let  deleteButton = UIAlertAction(title: LocalizableKeys.EmergencyContacts.actionSheetDeleteTitle, style: .destructive, handler: { (action) -> Void in
            let request = EditEmergencyContact.DeleteEmergencyContact.Request(emergencyContactID: self.router?.dataStore?.emergencyContact.ID ?? 0)
            self.interactor?.deleteEmergencyContact(request: request)
        })
        
        let cancelButton = UIAlertAction(title: LocalizableKeys.General.AlertOptions.cancel, style: .cancel, handler: nil)
        
        alertController.addAction(deleteButton)
        alertController.addAction(cancelButton)
        
        self.navigationController!.present(alertController, animated: true, completion: nil)
    }
    
    @IBAction func clearTextField(_ sender: UIButton) {
        switch sender.tag {
        case 0:
            self.name.text = ""
            self.name.validate({ () -> TextFieldValidationState in
                return .notValidated
            })
            self.isValidName = false
            self.name.titleText.alpha = 0
            self.name.titleText.transform = CGAffineTransform.identity.translatedBy(x: 0, y: 5)
        case 1:
            self.phone.text = ""
            self.phone.validate({ () -> TextFieldValidationState in
                return .notValidated
            })
            self.isValidPhone = false
            self.phone.titleText.alpha = 0
            self.phone.titleText.transform = CGAffineTransform.identity.translatedBy(x: 0, y: 5)
        default:
            self.email.text = ""
            self.email.validate({ () -> TextFieldValidationState in
                return .notValidated
            })
            self.isValidEmail = true
            self.email.titleText.alpha = 0
            self.email.titleText.transform = CGAffineTransform.identity.translatedBy(x: 0, y: 5)
        }
    }
}

/**
 ExtensiÃ³n para los protocolos de EditEmergencyContactViewController que invoca el presenter
 */
extension EditEmergencyContactViewController: EditEmergencyContactDisplayLogic {
    func displaySetupEmergencyContact(viewModel: EditEmergencyContact.SetupEmergencycontact.ViewModel) {
        let emergencyContact = viewModel.emergencyContact
    
        self.name.text = emergencyContact.name ?? ""
        self.name.titleText.alpha = 1
        self.name.titleText.transform = CGAffineTransform.identity.translatedBy(x: 0, y: 0)
        self.phone.text = emergencyContact.phone?.replacingOccurrences(of: " ", with: "") ?? ""
        self.phone.titleText.alpha = 1
        self.phone.titleText.transform = CGAffineTransform.identity.translatedBy(x: 0, y: 0)
        self.email.text = emergencyContact.email ?? ""
        self.email.titleText.alpha = 1
        self.email.titleText.transform = CGAffineTransform.identity.translatedBy(x: 0, y: 0)
        
        self.picture.image = FilesManager.getImageInDirectoryInsideDocuments(directory: UserDefaultsManager.shared.directoryPicturesEmergencyContacts, name: self.router?.dataStore?.emergencyContact.picture ?? "") ?? UIImage(named: "defaultAvatar")
        
        
    }
    
    func displayNameValidation(viewModel: EditEmergencyContact.ValidateName.ViewModel) {
        self.name.validate { viewModel.validationState }
        
        switch viewModel.validationState {
        case .valid:
            self.isValidName = true
        default:
             self.isValidName = false
        }
    }
    
    func displayPhoneNumberValidation(viewModel: EditEmergencyContact.ValidatePhoneNumber.ViewModel) {
        self.phone.validate { viewModel.validationState }
        
        switch viewModel.validationState {
        case .valid:
            self.isValidPhone = true
        default:
            self.isValidPhone = false
        }
    }
    
    func displayEmailValidation(viewModel: EditEmergencyContact.ValidateEmail.ViewModel) {
        self.email.validate { viewModel.validationState }
        
        switch viewModel.validationState {
        case .notValidated, .valid:
            self.isValidEmail = true
        default:
            self.isValidEmail = false
        }
    }
    
    func displayEditEmergencyContact(viewModel: EditEmergencyContact.EditEmergencyContact.ViewModel) {
        IALoader.shared.hide()
        
        if viewModel.isSuccess {
            self.showAlert(with: nil, message: LocalizableKeys.EmergencyContacts.editSuccess, actionTitle: LocalizableKeys.General.AlertOptions.accept, action: { (action) in
                self.router?.goToProfileViewController()
            })
        } else {
            self.showAlert(with: nil, message: LocalizableKeys.General.serviceError, actionTitle: LocalizableKeys.General.AlertOptions.accept, action: nil)
        }
    }
    
    func displayDeleteEmergencyContact(viewModel: EditEmergencyContact.DeleteEmergencyContact.ViewModel) {
        IALoader.shared.hide()
        if viewModel.isSuccess {
            self.showAlert(with: nil, message: LocalizableKeys.EmergencyContacts.deleteSuccess, actionTitle: LocalizableKeys.General.AlertOptions.accept, action: { (action) in
                self.router?.goToProfileViewController()
            })
        } else {
            self.showAlert(with: nil, message: LocalizableKeys.General.serviceError, actionTitle: LocalizableKeys.General.AlertOptions.accept, action: nil)
        }
    }
    
    func displaySavePictureEmergencyContact(viewModel: EditEmergencyContact.SavePictureEmergencyContact.ViewModel) {
        IALoader.shared.hide()
        
        if viewModel.isSuccess {
            let request = EditEmergencyContact.EditEmergencyContact.Request(emergencyContactID: self.router?.dataStore?.emergencyContact.ID ?? 0, picture: viewModel.path, name: self.name.text, phone: self.phone.text, email: self.email.text)
            interactor?.editEmergencyContact(request: request)
        } else {
            self.showAlert(with: nil, message: LocalizableKeys.EmergencyContacts.deleteFailed, actionTitle: LocalizableKeys.General.AlertOptions.accept, action: nil)
        }
    }
}

// MARK: - FloatingTextFieldDelegate
extension EditEmergencyContactViewController : FloatingTextFieldDelegate  {
    func textFieldShouldReturn(_ textField: FloatingTextField) { }
    
    func textFieldDidBeginEditing(_ textField: FloatingTextField) {
        switch textField {
        case self.name:
            self.isValidName = false
        case self.phone:
            self.isValidPhone = false
        default:
            self.isValidEmail = false
        }
    }
    
    func textFieldDidEndEditing(_ textField: FloatingTextField) {
        switch textField {
        case self.name:
            validName()
        case self.phone:
            validPhoneNumber()
        default:
            validEmail()
        }
    }
}

// MARK: - Image Picker Delegate Methods
/**
 ExtensiÃ³n para los protocolos de UIImagePickerController que invoca el presenter
 */
extension EditEmergencyContactViewController: UIImagePickerControllerDelegate, UINavigationControllerDelegate {
    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [String : Any]) {
        if let image = info[UIImagePickerControllerOriginalImage] as? UIImage {
            imageChanged = true
            picture.image = image
        }
        dismiss(animated: true, completion: nil)
    }
}

/**
 ExtensiÃ³n para llamar las validaciones de los campos
 */
extension EditEmergencyContactViewController {
    private func validName() {
        let request = EditEmergencyContact.ValidateName.Request(name: self.name.text)
        interactor?.validateName(request: request)
    }
    
    private func validPhoneNumber() {
        let request = EditEmergencyContact.ValidatePhoneNumber.Request(phoneNumber: self.phone.text)
        interactor?.validatePhoneNumber(request: request)
    }
    
    private func validEmail() {
        let request = EditEmergencyContact.ValidateEmail.Request(email: self.email.text)
        interactor?.validateEmail(request: request)
    }
}

