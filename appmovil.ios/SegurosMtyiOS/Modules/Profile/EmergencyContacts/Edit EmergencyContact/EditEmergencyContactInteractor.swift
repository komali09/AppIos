//
//  EditEmergencyContactInteractor.swift
//  SegurosMtyiOS
//
//  Created by Erwin Jonnatan Perez Téllez on 08/01/18.
//  Copyright (c) 2018 IA Interactive. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import RxSwift

protocol EditEmergencyContactBusinessLogic {
    func validateName(request: EditEmergencyContact.ValidateName.Request)
    func validatePhoneNumber(request: EditEmergencyContact.ValidatePhoneNumber.Request)
    func validateEmail(request: EditEmergencyContact.ValidateEmail.Request)
    func setupEmergencyContact()
    func editEmergencyContact(request: EditEmergencyContact.EditEmergencyContact.Request)
    func deleteEmergencyContact(request: EditEmergencyContact.DeleteEmergencyContact.Request)
    func savePictureOfEmergencyContact(request: EditEmergencyContact.SavePictureEmergencyContact.Request)
}

protocol EditEmergencyContactDataStore {
    var emergencyContact: EmergencyContact { get set }
}

class EditEmergencyContactInteractor: EditEmergencyContactBusinessLogic, EditEmergencyContactDataStore {
    
    var presenter: (EditEmergencyContactPresentationLogic & ExpiredSessionPresentationLogic & ErrorPresentationLogic)?
    var worker: EmergencyContactsWorker?
    
    // MARK: DataStore
    var disposableBag: DisposeBag = DisposeBag()
    var emergencyContact = EmergencyContact()
    
    // MARK: Do something
    func setupEmergencyContact() {
        let response = EditEmergencyContact.SetupEmergencycontact.Response(emergencyContact: self.emergencyContact)
        self.presenter?.presentEmergencyContact(response: response)
    }
    
    func editEmergencyContact(request: EditEmergencyContact.EditEmergencyContact.Request) {
        if worker == nil {
            worker = EmergencyContactsWorker()
        }
        
        worker?.editEmergencyContact(emergencyContactID: request.emergencyContactID, picture: request.picture ?? "", name: request.name ?? "", phone: request.phone ?? "", email: request.email ?? "").subscribe({ [weak self] event in
            switch event {
            case .next(let result):
                let response = EditEmergencyContact.EditEmergencyContact.Response(isSuccess: result)
                self?.presenter?.presentEditEmergencyContact(response: response)
            case .error(let error):
                switch error {
                case NetworkingError.unauthorized:
                    self?.presenter?.presentExpiredSession()
                default:
                    self?.presenter?.presentError(error)
                }
            default:
                break
            }
        }).disposed(by: self.disposableBag)
    }
    
    func deleteEmergencyContact(request: EditEmergencyContact.DeleteEmergencyContact.Request) {
        if worker == nil {
            worker = EmergencyContactsWorker()
        }
        
        worker?.deleteEmergencyContact(emergencyContactID: request.emergencyContactID).subscribe({ [weak self] event in
            switch event {
            case .next(let result):
                let response = EditEmergencyContact.DeleteEmergencyContact.Response(isSuccess: result)
                self?.presenter?.presentDeleteEmergencyContact(response: response)
            case .error(let error):
                switch error {
                case NetworkingError.unauthorized:
                    self?.presenter?.presentExpiredSession()
                default:
                    self?.presenter?.presentError(error)
                }
            default:
                break
            }
        }).disposed(by: self.disposableBag)
    }
    
    func savePictureOfEmergencyContact(request: EditEmergencyContact.SavePictureEmergencyContact.Request) {
        if worker == nil {
            worker = EmergencyContactsWorker()
        }
        
        worker?.savePictureOfEmergencyContact(picture: request.picture).subscribe({ [weak self] event in
            switch event {
            case .next(let result):
                let response = EditEmergencyContact.SavePictureEmergencyContact.Response(isSuccess: true, path: result)
                self?.presenter?.presentSavePictureEmergencyContact(response: response)
            case .error(_):
                let response = EditEmergencyContact.SavePictureEmergencyContact.Response(isSuccess: false, path: nil)
                self?.presenter?.presentSavePictureEmergencyContact(response: response)

            default:
                break
            }
        }).disposed(by: self.disposableBag)
    }
    
    
    //MARK: Validations
    /**
     Es disparado cuando se necesita validar el nombre utilizada para editar un contacto de emergencia
     - parameter request: teléfono a validar.
     */
    func validateName(request: EditEmergencyContact.ValidateName.Request) {
        if worker == nil {
            worker = EmergencyContactsWorker()
        }
        
        if let result = worker?.validateName(request.name) {
            let response = EditEmergencyContact.ValidateName.Response(validationState: result)
            self.presenter?.presentNameValidation(validationState: response)
        }
    }
    
    /**
     Es disparado cuando se necesita validar el número de teléfono utilizada para editar un contacto de emergencia
     - parameter request: teléfono a validar.
     */
    func validatePhoneNumber(request: EditEmergencyContact.ValidatePhoneNumber.Request) {
        if worker == nil {
            worker = EmergencyContactsWorker()
        }
        
        if let result = worker?.validatePhoneNumber(request.phoneNumber) {
            let response = EditEmergencyContact.ValidatePhoneNumber.Response(validationState: result)
            self.presenter?.presentPhoneNumberValidation(validationState: response)
        }
    }
    
    func validateEmail(request: EditEmergencyContact.ValidateEmail.Request) {
        if worker == nil {
            worker = EmergencyContactsWorker()
        }
        
        if let result = worker?.validateEmail(request.email) {
            let response = EditEmergencyContact.ValidateEmail.Response(validationState: result)
            self.presenter?.presentEmailValidation(validationState: response)
        }
    }
}
