//
//  SelectContactFromDeviceInteractor.swift
//  SegurosMtyiOS
//
//  Created by Erwin Jonnatan Perez TÃ©llez on 22/01/18.
//  Copyright (c) 2018 IA Interactive. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import RxSwift

enum NoDataContact {
    case none
    case noName
    case noPhone
}


protocol SelectContactFromDeviceBusinessLogic {
    func getContactsFromDevice()
    func groupContactsByAlphabet(request: SelectContactFromDevice.GroupContactsByAlphabet.Request)
    func groupContactsfilteredBySearchText(request: SelectContactFromDevice.GroupContactsFilteredBySearchText.Request)
    func addEmergencyContact(request: SelectContactFromDevice.AddemergencyContact.Request)
}

protocol SelectContactFromDeviceDataStore {
    //var myDataStoreVar: String { get set }
}

class SelectContactFromDeviceInteractor: SelectContactFromDeviceBusinessLogic, SelectContactFromDeviceDataStore {
    var presenter: (SelectContactFromDevicePresentationLogic & ExpiredSessionPresentationLogic & ErrorPresentationLogic)?
    var worker: EmergencyContactsWorker?
    
    // MARK: DataStore
    var disposableBag: DisposeBag = DisposeBag()
    var contacts: [Contact]?
    
    // MARK: Do something
    func getContactsFromDevice() {
        if worker == nil {
            worker = EmergencyContactsWorker()
        }
        
        if let result = worker?.getContactsFromDevice() {
            self.contacts = result
            let response = SelectContactFromDevice.GetContacts.Response(contacts: result)
            self.presenter?.presentContacts(response: response)
        }
    }
    
    func groupContactsByAlphabet(request: SelectContactFromDevice.GroupContactsByAlphabet.Request) {
        if worker == nil {
            worker = EmergencyContactsWorker()
        }
        
        if self.contacts == nil {
            return
        }
        
        if let result = worker?.groupContactsByAlphabet(contacts: self.contacts!) {
            let response = SelectContactFromDevice.GroupContactsByAlphabet.Response(groupContacts: result)
            self.presenter?.presentGroupContactsByAlphabet(response: response)
        }
    }
    
    func groupContactsfilteredBySearchText(request: SelectContactFromDevice.GroupContactsFilteredBySearchText.Request) {
        if worker == nil {
            worker = EmergencyContactsWorker()
        }
        
        if self.contacts == nil {
            return
        }
        
        if let result = worker?.groupContactsfiltered(by: request.searchText, contacts: self.contacts!) {
            let response = SelectContactFromDevice.GroupContactsFilteredBySearchText.Response(groupContacts: result)
            self.presenter?.presentGroupContactsFilteredBySearchText(response: response)
        }
    }
    
    func addEmergencyContact(request: SelectContactFromDevice.AddemergencyContact.Request) {
        
        var noDataContact: NoDataContact?
        let contact = request.contact
        
        if contact.name == nil {
            noDataContact = .noName
        } else if contact.phone == nil {
            noDataContact = .noPhone
        }
        
        if let noData = noDataContact {
            let response = SelectContactFromDevice.AddemergencyContact.Response(noDataContact: noData)
            self.presenter?.presentErrorNoDataContact(response: response)
            return
        }
        
        if worker == nil {
            worker = EmergencyContactsWorker()
        }
        
        if let picture = contact.picture {
            //Guardar foto asociada del contacto en documentos
            let iaImageView = IAUIImageView(frame: CGRect(x: 0, y: 0, width: 120, height: 120))
            iaImageView.image = picture
            
            worker?.savePictureOfEmergencyContact(picture: iaImageView).subscribe({ [weak self] event in
                switch event {
                case .next(let result):
                    //Asociar la foto del contacto en el servicio
                    self?.addEmergencyContactWithPicture(contact: contact, picture: result)
                case .error(_):
                    let response = SelectContactFromDevice.AddemergencyContact.Response(noDataContact: .none)
                    self?.presenter?.presentErrorNoDataContact(response: response)
                default:
                    break
                }
            }).disposed(by: self.disposableBag)
        } else {
            //Guardar contacto sin foto
            worker?.addEmergencyContact(emergencyContactID: 0, picture: "", name: contact.name ?? "", phone: contact.phone ?? "", email: contact.email ?? "").subscribe({ [weak self] event in
                switch event {
                case .next(_):
                    self?.presenter?.presentAddEmergencyContact()
                case .error(let error):
                    switch error {
                    case NetworkingError.unauthorized:
                        self?.presenter?.presentExpiredSession()
                    default:
                        self?.presenter?.presentError(error)
                    }
                default:
                    break
                }
            }).disposed(by: self.disposableBag)
        }
    }
    
    private func addEmergencyContactWithPicture(contact: Contact, picture: String) {
        if worker == nil {
            worker = EmergencyContactsWorker()
        }
        
        worker?.addEmergencyContact(emergencyContactID: 0, picture: picture, name: contact.name ?? "", phone: contact.phone ?? "", email: contact.email ?? "").subscribe({ [weak self] event in
            switch event {
            case .next(_):
                self?.presenter?.presentAddEmergencyContact()
            case .error(let error):
                switch error {
                case NetworkingError.unauthorized:
                    self?.presenter?.presentExpiredSession()
                default:
                    self?.presenter?.presentError(error)
                }
            default:
                break
            }
        }).disposed(by: self.disposableBag)
    }
}
