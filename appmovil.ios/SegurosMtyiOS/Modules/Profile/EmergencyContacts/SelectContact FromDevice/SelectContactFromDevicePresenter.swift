//
//  SelectContactFromDevicePresenter.swift
//  SegurosMtyiOS
//
//  Created by Erwin Jonnatan Perez Téllez on 22/01/18.
//  Copyright (c) 2018 IA Interactive. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

protocol SelectContactFromDevicePresentationLogic {
    func presentContacts(response: SelectContactFromDevice.GetContacts.Response)
    func presentGroupContactsByAlphabet(response: SelectContactFromDevice.GroupContactsByAlphabet.Response)
    func presentGroupContactsFilteredBySearchText(response: SelectContactFromDevice.GroupContactsFilteredBySearchText.Response)
    func presentAddEmergencyContact()
    func presentErrorNoDataContact(response: SelectContactFromDevice.AddemergencyContact.Response)
}

class SelectContactFromDevicePresenter: SelectContactFromDevicePresentationLogic {
    weak var viewController: (SelectContactFromDeviceDisplayLogic & ExpiredSessionDisplayLogic & ErrorDisplayLogic)?
    
    // MARK: Do something
    
    func presentContacts(response: SelectContactFromDevice.GetContacts.Response) {
        let viewModel = SelectContactFromDevice.GetContacts.ViewModel(contacts: response.contacts)
        viewController?.displayContacts(viewModel: viewModel)
    }
    
    func presentGroupContactsByAlphabet(response: SelectContactFromDevice.GroupContactsByAlphabet.Response) {
        let viewModel = SelectContactFromDevice.GroupContactsByAlphabet.ViewModel(groupContacts: response.groupContacts)
        viewController?.displayGroupContactsByAlphabet(viewModel: viewModel)
    }
    
    func presentGroupContactsFilteredBySearchText(response: SelectContactFromDevice.GroupContactsFilteredBySearchText.Response) {
        let viewModel = SelectContactFromDevice.GroupContactsFilteredBySearchText.ViewModel(groupContacts: response.groupContacts)
        viewController?.displayGroupContactsFilteredBySearchText(viewModel: viewModel)
    }
    
    func presentErrorNoDataContact(response: SelectContactFromDevice.AddemergencyContact.Response) {
        
        var message = ""
        
        switch response.noDataContact {
        case .noName:
            message = LocalizableKeys.EmergencyContacts.noNameContact
        case .noPhone:
            message = LocalizableKeys.EmergencyContacts.noPhoneContact
        default:
            message = LocalizableKeys.EmergencyContacts.noDataContact
        }
        
        let viewModel = SelectContactFromDevice.AddemergencyContact.ViewModel(errorMessage: message)
        self.viewController?.displayErrorNoDataContact(viewModel: viewModel)
    }
    
    func presentAddEmergencyContact() {
        self.viewController?.displayAddEmergencyContact()
    }
}

/**
 Extensión para mostrar alerta con un tipo de error
 */
extension SelectContactFromDevicePresenter: ErrorPresentationLogic {
    func presentError(_ error: Error) {
        var message: String!
        switch error {
        case NetworkingError.noInternet:
            message = LocalizableKeys.Profile.EditProfile.errorNoInternet
            viewController?.displayError(with: message)
        case NetworkingError.unauthorized:
            presentExpiredSession()
        case NetworkingError.noSuccessStatusCode(_, _):
            message = LocalizableKeys.General.serviceError
            viewController?.displayError(with: message)
        default:
            message = LocalizableKeys.General.serviceError
            viewController?.displayError(with: message)
        }
    }
}

/**
 Extensión para mostrar alerta de expiración de token
 */
extension SelectContactFromDevicePresenter : ExpiredSessionPresentationLogic {
    func presentExpiredSession() {
        self.viewController?.displayExpiredSession()
    }
}
