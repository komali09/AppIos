//
//  AddEmergencyContactViewController.swift
//  SegurosMtyiOS
//
//  Created by Erwin Perez Tellez on 20/01/18.
//  Copyright (c) 2018 IA Interactive. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RxSwift

protocol AddEmergencyContactDisplayLogic: class {
    func displayNameValidation(viewModel: AddEmergencyContact.ValidateName.ViewModel)
    func displayPhoneNumberValidation(viewModel: AddEmergencyContact.ValidatePhoneNumber.ViewModel)
    func displayEmailValidation(viewModel: AddEmergencyContact.ValidateEmail.ViewModel)
    func displaySavePictureEmergencyContact(viewModel: AddEmergencyContact.SavePictureEmergencyContact.ViewModel)
    func displayAddEmergencyContact(viewModel: AddEmergencyContact.AddEmergencyContact.ViewModel)
}

class AddEmergencyContactViewController: IAPopupViewController, ExpiredSessionDisplayLogic, ErrorDisplayLogic {
    var interactor: AddEmergencyContactBusinessLogic?
    var router: (NSObjectProtocol & AddEmergencyContactRoutingLogic & AddEmergencyContactDataPassing)?
    
    @IBOutlet weak var name: FloatingTextField!
    @IBOutlet weak var phone: FloatingTextField!
    @IBOutlet weak var email: FloatingTextField!
    
    @IBOutlet weak var picture: IAUIImageView!
    fileprivate var imagePicker = UIImagePickerController()
    fileprivate var imageChanged = false
    var disposableBag: DisposeBag = DisposeBag()
    
    var isValidName = false
    var isValidPhone = false
    var isValidEmail = false
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = AddEmergencyContactInteractor()
        let presenter = AddEmergencyContactPresenter()
        let router = AddEmergencyContactRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.name.delegate = self
        self.phone.delegate = self
        self.email.delegate = self
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        self.view.endEditing(true)
    }
    
    // MARK: Do something
    @IBAction func addPicturePressed(_ sender: Any) {
        RequestResourcesManager.isAuthorizedToUseCamera().subscribe { (event) in
            switch event {
            case .next(let isAuthorized):
                self.requestPhotosLibrary(isAuthorizedCamera: isAuthorized)
            default:
                break
            }
        }.disposed(by: self.disposableBag)
    }
    
    private func requestPhotosLibrary(isAuthorizedCamera: Bool) {
        RequestResourcesManager.isAuthorizedToAccessPhotos().subscribe { (event) in
            switch event {
            case .next(let isAuthorized):
                self.prepareUIImagePickerViewController(isAuthorizedCamera: isAuthorizedCamera, isAuthorizedPhotos: isAuthorized)
            default:
                break
            }
            }.disposed(by: self.disposableBag)
    }
    
    private func prepareUIImagePickerViewController(isAuthorizedCamera: Bool, isAuthorizedPhotos: Bool) {
        if isAuthorizedCamera == false && isAuthorizedPhotos == false {
            let alert = IABlurAlertController(title: nil, message: LocalizableKeys.General.openSettingsCameraAndGaleryPhotos, preferredStyle: .alert)
            
            alert.addAction(UIAlertAction(title: LocalizableKeys.General.AlertOptions.cancel, style: .default, handler: nil))
            
            alert.addAction(UIAlertAction(title: LocalizableKeys.General.AlertOptions.configuration, style: .default, handler: { (action) in
                if let appSettings = URL(string: UIApplicationOpenSettingsURLString) {
                    UIApplication.shared.open(appSettings, options: [:], completionHandler: { (completion) in
                        alert.dismiss(animated: true, completion: nil)
                    })
                }
            }))
            
            self.present(alert, animated: true, completion: nil)
            return
        }
        
        DispatchQueue.main.async(execute: {
            let actionSheet = UIAlertController(title: nil, message: nil, preferredStyle: .actionSheet)
            
            if isAuthorizedCamera {
                let cameraAction = UIAlertAction(title: "Tomar foto", style: .default, handler: { [unowned self] _ in
                    if UIImagePickerController.isSourceTypeAvailable(.camera) {
                        self.imagePicker.delegate = self
                        self.imagePicker.sourceType = .camera
                        self.imagePicker.allowsEditing = false
                        self.present(self.imagePicker, animated: true, completion: nil)
                    }
                })
                actionSheet.addAction(cameraAction)
            }
            
            if isAuthorizedPhotos {
                let libraryAction = UIAlertAction(title: "Seleccionar foto", style: .default, handler: { [unowned self] _ in
                    if UIImagePickerController.isSourceTypeAvailable(.photoLibrary) {
                        self.imagePicker.delegate = self
                        self.imagePicker.sourceType = .photoLibrary
                        self.imagePicker.allowsEditing = false
                        
                        self.imagePicker.setCustomNavigation()
                        
                        self.present(self.imagePicker, animated: true, completion: nil)
                    }
                })
                actionSheet.addAction(libraryAction)
            }
            
            let cancelAction = UIAlertAction(title: "Cancelar", style: .cancel, handler: nil)
            actionSheet.addAction(cancelAction)
            
            self.present(actionSheet, animated: true, completion: nil)
        })
    }
    
    @IBAction func savePressed(_ sender: Any) {
        validName()
        validPhoneNumber()
        validEmail()
        
        if isValidName && isValidPhone && isValidEmail {
            if imageChanged {
                let request = AddEmergencyContact.SavePictureEmergencyContact.Request(picture: picture)
                interactor?.savePictureOfEmergencyContact(request: request)
            } else {
                let request = AddEmergencyContact.AddEmergencyContact.Request(emergencyContactID: 0, picture: "", name: self.name.text, phone: self.phone.text, email: self.email.text)
                interactor?.addEmergencyContact(request: request)
            }
        }
    }
    
    @IBAction func clearTextField(_ sender: UIButton) {
        switch sender.tag {
        case 0:
            self.name.text = ""
            self.name.validate({ () -> TextFieldValidationState in
                return .notValidated
            })
            self.isValidName = false
            self.name.titleText.alpha = 0
            self.name.titleText.transform = CGAffineTransform.identity.translatedBy(x: 0, y: 5)
        case 1:
            self.phone.text = ""
            self.phone.validate({ () -> TextFieldValidationState in
                return .notValidated
            })
            self.isValidPhone = false
            self.phone.titleText.alpha = 0
            self.phone.titleText.transform = CGAffineTransform.identity.translatedBy(x: 0, y: 5)
        default:
            self.email.text = ""
            self.email.validate({ () -> TextFieldValidationState in
                return .notValidated
            })
            self.isValidEmail = true
            self.email.titleText.alpha = 0
            self.email.titleText.transform = CGAffineTransform.identity.translatedBy(x: 0, y: 5)
        }
    }
    
    @IBAction func closePressed(_ sender: Any) {
        self.dismiss(animated: true, completion: nil)
    }
    
}

/**
 Extensi√≥n para los protocolos de EditEmergencyContactViewController que invoca el presenter
 */
extension AddEmergencyContactViewController: AddEmergencyContactDisplayLogic {
    func displayNameValidation(viewModel: AddEmergencyContact.ValidateName.ViewModel) {
        self.name.validate { viewModel.validationState }
        
        switch viewModel.validationState {
        case .valid:
            self.isValidName = true
        default:
            self.isValidName = false
        }
    }
    
    func displayPhoneNumberValidation(viewModel: AddEmergencyContact.ValidatePhoneNumber.ViewModel) {
        self.phone.validate { viewModel.validationState }
        
        switch viewModel.validationState {
        case .valid:
            self.isValidPhone = true
        default:
            self.isValidPhone = false
        }
    }
    
    func displayEmailValidation(viewModel: AddEmergencyContact.ValidateEmail.ViewModel) {
        self.email.validate { viewModel.validationState }
        
        switch viewModel.validationState {
        case .notValidated, .valid:
            self.isValidEmail = true
        default:
            self.isValidEmail = false
        }
    }
    
    func displaySavePictureEmergencyContact(viewModel: AddEmergencyContact.SavePictureEmergencyContact.ViewModel) {
        IALoader.shared.hide()
        
        if viewModel.isSuccess {
            let request = AddEmergencyContact.AddEmergencyContact.Request(emergencyContactID: 0, picture: viewModel.path, name: self.name.text, phone: self.phone.text, email: self.email.text)
            interactor?.addEmergencyContact(request: request)
        } else {
            self.showAlert(with: nil, message: LocalizableKeys.EmergencyContacts.addFailed, actionTitle: LocalizableKeys.General.AlertOptions.accept, action: nil)
        }
    }
    
    func displayAddEmergencyContact(viewModel: AddEmergencyContact.AddEmergencyContact.ViewModel) {
        IALoader.shared.hide()
        
        if viewModel.isSuccess {
             self.router?.goToPerfilViewController()
        } else {
            self.showAlert(with: nil, message: LocalizableKeys.General.serviceError, actionTitle: LocalizableKeys.General.AlertOptions.accept, action: nil)
        }
    }
}

// MARK: - FloatingTextFieldDelegate
extension AddEmergencyContactViewController : FloatingTextFieldDelegate  {
    func textFieldShouldReturn(_ textField: FloatingTextField) { }
    
    func textFieldDidBeginEditing(_ textField: FloatingTextField) {
        switch textField {
        case self.name:
            self.isValidName = false
        case self.phone:
            self.isValidPhone = false
        default:
            self.isValidEmail = false
        }
    }
    
    func textFieldDidEndEditing(_ textField: FloatingTextField) {
        switch textField {
        case self.name:
            validName()
        case self.phone:
            validPhoneNumber()
        default:
            validEmail()
        }
    }
}

// MARK: - Image Picker Delegate Methods
/**
 Extensi√≥n para los protocolos de UIImagePickerController que invoca el presenter
 */
extension AddEmergencyContactViewController: UIImagePickerControllerDelegate, UINavigationControllerDelegate {
    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [String : Any]) {
        if let image = info[UIImagePickerControllerOriginalImage] as? UIImage {
            imageChanged = true
            picture.image = image
        }
        dismiss(animated: true, completion: nil)
    }
}

/**
 Extensi√≥n para llamar las validaciones de los campos
 */
extension AddEmergencyContactViewController {
    private func validName() {
        let request = AddEmergencyContact.ValidateName.Request(name: self.name.text)
        interactor?.validateName(request: request)
    }
    
    private func validPhoneNumber() {
        let request = AddEmergencyContact.ValidatePhoneNumber.Request(phoneNumber: self.phone.text)
        interactor?.validatePhoneNumber(request: request)
    }
    
    private func validEmail() {
        let request = AddEmergencyContact.ValidateEmail.Request(email: self.email.text)
        interactor?.validateEmail(request: request)
    }
}
