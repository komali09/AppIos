//
//  PrivacyViewController.swift
//  SegurosMtyiOS
//
//  Created by Mariana on 26/01/18.
//  Copyright (c) 2018 IA Interactive. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import WebKit

protocol PrivacyDisplayLogic: class {
    func displayWebView(viewModel: Privacy.WebViewPrivacy.ViewModel)
    func displayError()
}

@available(iOS 11.0, *)
class PrivacyViewController: UIViewController, WKUIDelegate ,WKNavigationDelegate, PrivacyDisplayLogic {
    var interactor: PrivacyBusinessLogic?
    
    @IBOutlet weak var indicatorWeb: UIActivityIndicatorView!
    @IBOutlet weak var webViewContainer: UIView!
    
    private var webView: WKWebView!
    private var errorView:IAErrorView!
    
    var setURL: String = ""
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = PrivacyInteractor()
        let presenter = PrivacyPresenter()
        viewController.interactor = interactor
        interactor.presenter = presenter
        presenter.viewController = viewController
    }

    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.setupWebView()
        self.setupErrorView()
        self.loadURL()
    }
    
    // MARK: Do something
    
    private func loadURL() {
        let request = Privacy.WebViewPrivacy.Request(url: self.setURL)
        self.indicatorWeb.startAnimating()
            interactor?.getResponseURL(request: request)
    }
    
    func displayWebView(viewModel: Privacy.WebViewPrivacy.ViewModel) {
        let myURL = URL(string: viewModel.url)
        let myRequest = URLRequest(url: myURL!)
        webView.load(myRequest)
    }
    
    func displayError() {
        self.indicatorWeb.stopAnimating()
        self.errorView.show(type: .noInternet, message: LocalizableKeys.General.noInternet)
    }
    
    func setupWebView(){
        let webConfiguration = WKWebViewConfiguration()
        let customFrame = webViewContainer.frame
        self.webView = WKWebView (frame: customFrame , configuration: webConfiguration)
        webView.translatesAutoresizingMaskIntoConstraints = false
        self.webViewContainer.addSubview(webView)
        webView.topAnchor.constraint(equalTo: webViewContainer.topAnchor).isActive = true
        webView.rightAnchor.constraint(equalTo: webViewContainer.rightAnchor).isActive = true
        webView.leftAnchor.constraint(equalTo: webViewContainer.leftAnchor).isActive = true
        webView.bottomAnchor.constraint(equalTo: webViewContainer.bottomAnchor).isActive = true
        webView.heightAnchor.constraint(equalTo: webViewContainer.heightAnchor).isActive = true
        webView.uiDelegate = self
        webView.navigationDelegate = self
    }
    
    func setupErrorView() {
        errorView = IAErrorView(frame: self.webViewContainer.bounds)
        errorView.autoresizingMask = [.flexibleWidth, .flexibleHeight]
        errorView.isHidden = true
        self.webViewContainer.addSubview(errorView)
    }
    
    func webView(_ webView: WKWebView, didFinish navigation: WKNavigation!) {
        indicatorWeb.stopAnimating()
    }

}
