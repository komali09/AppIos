//
//  ProfileInteractor.swift
//  SegurosMtyiOS
//
//  Created by Isidro Adan Garcia Solorio  on 12/7/17.
//  Copyright (c) 2017 IA Interactive. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
import RxSwift

protocol ProfileBusinessLogic {
    func loadProfileData()
    func getInsurancePoliciesData()
    func getAdvisorData()
    func logout()
}

protocol ProfileDataStore {
    var emergencyContact: EmergencyContact { get set }
    var insurancePolicies: [InsurancePolicy] { get set }
    var needsUpdateInsurancePolicies: Bool { get set }
    var needsUpdateAdvisorData: Bool { get set }
}

class ProfileInteractor: ProfileBusinessLogic, ProfileDataStore {
    var presenter: (ProfilePresentationLogic & ErrorPresentationLogic & ExpiredSessionPresentationLogic)?
    var worker: ProfileWorker?
    
    var insurancePolicies: [InsurancePolicy] = []
    var emergencyContact: EmergencyContact = EmergencyContact()
    var needsUpdateInsurancePolicies: Bool = true
    var needsUpdateAdvisorData: Bool = true
    // MARK: DataStore
    var disposableBag: DisposeBag = DisposeBag()
    
    func loadProfileData() {
        worker = ProfileWorker()
        if let userInfo = worker?.loadUserInfo(), let userPic = worker?.loadUserProfilePic() {
            presenter?.presentUserInfo(response: userInfo, profilePic: userPic)
            
        }
    }
    
    func getInsurancePoliciesData() {
        if worker == nil {
            worker = ProfileWorker()
        }
        if !needsUpdateInsurancePolicies {
            return
        }
        worker?.getInsurancePolicies().subscribe({ [weak self] event in
            switch event {
            case .next(let result):
                self?.needsUpdateInsurancePolicies = false
                self?.insurancePolicies = result
                self?.presenter?.presentInsurancePolicies(result)
            case .error(let error):
                switch error {
                case NetworkingError.unauthorized:
                    self?.presenter?.presentExpiredSession()
                default:
                    self?.presenter?.presentOnScreenError(error)
                }
            default:
                break
            }
            
        }).disposed(by: self.disposableBag)

    }
    func getAdvisorData() {
        if worker == nil {
            worker = ProfileWorker()
        }
        if !needsUpdateAdvisorData {
            return
        }
        worker?.getAdvisorInfo().subscribe({ [weak self] event in
            switch event {
            case .next(let result):
                self?.needsUpdateAdvisorData = false
                self?.presenter?.presentAdvisor(result)
            case .error(let error):
                switch error {
                case NetworkingError.unauthorized:
                    self?.presenter?.presentExpiredSession()
                default:
                    self?.presenter?.presentAdvisorOnScreenError(error)
                }
            default:
                break
            }
        }).disposed(by: self.disposableBag)
    }
    
    func logout() {
        if worker == nil {
            worker = ProfileWorker()
        }
        
        worker?.logout().subscribe({ [weak self] event in
            self?.presenter?.presentLogout()
        }).disposed(by: self.disposableBag)
    }
    
    
}
