//
//  PolicyDetailViewController.swift
//  SegurosMtyiOS
//
//  Created by Isidro Adan Garcia Solorio  on 1/8/18.
//  Copyright (c) 2018 IA Interactive. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PolicyDetailDisplayLogic: class {
    func displayPolicy(viewModel: PolicyDetail.loadPolicyDetail.ViewModel)
    func displayRemotePolicyData(viewModel: PolicyDetail.loadRemotePolicyDetail.ViewModel)
    func displayPolicyError(message:String)
    
    func displayBeneficiaries(viewModel: PolicyDetail.PolicyBeneficiaries.ViewModel)
    func displayBeneficiariesToWallet(viewModel: PolicyDetail.BeneficiaresToWallet.ViewModel)
    func displayBeneficiariesError(type: IAErrorAlertType, message: String)
    func displayBeneficiariesErrortoWallet()
    
    func displayCoverages(viewModel: PolicyDetail.PolicyCoverages.ViewModel)
    func displayCoveragesError(type: IAErrorAlertType, message: String)
    
    func displayWebPage()
    
}

protocol PolicyDetailVipLogic: class {
    var interactor: PolicyDetailBusinessLogic? { get set }
    var router: (NSObjectProtocol & PolicyDetailRoutingLogic & PolicyDetailDataPassing)?  { get set }
    
}

class PolicyDetailViewController: UIViewController, PolicyDetailVipLogic, ExpiredSessionDisplayLogic, ErrorDisplayLogic {
    var interactor: PolicyDetailBusinessLogic?
    var router: (NSObjectProtocol & PolicyDetailRoutingLogic & PolicyDetailDataPassing)?
    
    @IBOutlet weak var backgroundView: IAGradientView!
    @IBOutlet weak var policyNumber: UILabel!
    
    @IBOutlet weak var policyExpDateTitle: UILabel!
    @IBOutlet weak var policyExpDate: UILabel!
    
    @IBOutlet weak var policyCertificateTitle: UILabel!
    @IBOutlet weak var policyCertificate: UILabel!
    
    @IBOutlet weak var policyName: UILabel!
    @IBOutlet weak var planName: UILabel!
    @IBOutlet weak var policyIcon: UIImageView!
    @IBOutlet weak var backgroundIcon: UIImageView!
    @IBOutlet weak var favIcon: UIImageView!
    
    @IBOutlet weak var segmentedControl: UISegmentedControl!
    
    @IBOutlet weak var container: UIView!
    
    let imageExpandAnimationController = ImageExpandAnimationController()
    let imageShrinkAnimationController = ImageShrinkAnimationController()
    
    var currentViewController: UIViewController?
    
    lazy var info: PolicyDetailInfoViewController? = {
        let vc = self.storyboard?.instantiateViewController(withIdentifier: "info") as? PolicyDetailInfoViewController
        vc?.interactor = self.interactor
        vc?.router = self.router
        return vc
    }()
    lazy var cobertures: PolicyDetailCoveragesViewController? = {
        let vc = self.storyboard?.instantiateViewController(withIdentifier: "cobertures") as? PolicyDetailCoveragesViewController
        vc?.interactor = self.interactor
        return vc
    }()
    lazy var assistences: PolicyDetailAssistancesViewController? = {
        let vc = self.storyboard?.instantiateViewController(withIdentifier: "assistences") as? PolicyDetailAssistancesViewController
        vc?.imageExpandAnimationController = imageExpandAnimationController
        vc?.imageShrinkAnimationController = imageShrinkAnimationController
        vc?.interactor = self.interactor
        vc?.router = self.router
        return vc
    }()
    lazy var beneficiaries: PolicyDetailBeneficiariesViewController? = {
        let vc = self.storyboard?.instantiateViewController(withIdentifier: "beneficiaries") as? PolicyDetailBeneficiariesViewController
        vc?.interactor = self.interactor
        vc?.router = self.router
        return vc
    }()
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = PolicyDetailInteractor()
        let presenter = PolicyDetailPresenter()
        let router = PolicyDetailRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        loadData()
        self.title = "Detalle de tu p√≥liza"
        self.navigationItem.backBarButtonItem = UIBarButtonItem(title: "", style: .plain, target: nil, action: nil)
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        let profileVC = navigationController?.viewControllers.first(where: ({ $0 is ProfileViewController })) as? ProfileViewController
        var profileDS = profileVC?.router?.dataStore
        self.router?.passDataToProfile(source: self.router?.dataStore, destination: &profileDS)
    }
    
    // MARK: Do something
    
    func loadData() {
        segmentedControl.sendActions(for: .valueChanged)
        IALoader.shared.show(LocalizableKeys.Loader.getInfoPolicy)
        interactor?.loadPolicyData()
    }
}

extension PolicyDetailViewController: PolicyDetailDisplayLogic {
    func displayPolicy(viewModel: PolicyDetail.loadPolicyDetail.ViewModel) {

        if let _ = self.info {
            self.info?.successFooter?.isHidden = false
        }
        
        
        
        let firstColor = viewModel.cardId.gradientPrimaryColor
        let secondColor = viewModel.cardId.gradientSecondaryColor
        changeGradientViewColor(firstColor, toColor: secondColor)
        
        favIcon.isHidden = viewModel.isFavHidden
        policyName.text = viewModel.name
        policyNumber.text = viewModel.number
        planName.text = viewModel.planName
        policyExpDate.text = viewModel.expDate
        policyCertificate.text = viewModel.certificateId
        policyIcon.image = viewModel.cardId.icon
        switch viewModel.cardId {
        case .optaMedica:
            backgroundIcon.image = nil
        default:
            break
        }
        planName.isHidden = viewModel.cardId != .alfaMedical
        policyCertificateTitle.isHidden = viewModel.planForm != .collective
        policyCertificate.isHidden = viewModel.planForm != .collective
        
        self.info?.policy = self.router?.dataStore?.policy
        self.info?.reloadCollectionData(items: viewModel.items)
        
        switch viewModel.cardId {
        case .alfaMedicalInternational:
            policyName.text = LocalizableKeys.Profile.MyInsurancePolicies.alfaMedicalCardLabel
            planName.text = LocalizableKeys.Profile.MyInsurancePolicies.alfaMedicalInternationalCardLabel
            planName.isHidden = false
        default:
            break
        }
        
        refreshPolicyPrincipalInProfile()
        
    }
    
    func displayRemotePolicyData(viewModel: PolicyDetail.loadRemotePolicyDetail.ViewModel) {
        
        if viewModel.isTitular && self.segmentedControl.numberOfSegments < 4{
            self.segmentedControl.insertSegment(withTitle: LocalizableKeys.Profile.PolicyDetail.coassuranced, at: 3, animated: true)
            if DeviceDetector.DeviceType.IS_IPHONE_5 {
                let font = UIFont.systemFont(ofSize: 11)
                segmentedControl.setTitleTextAttributes([NSAttributedStringKey.font: font], for: .normal)
            }
        }
        self.info?.reloadData(viewModel: viewModel)
        IALoader.shared.hide()
        
        refreshPolicyPrincipalInProfile()
    }
    
    func displayPolicyError(message:String) {
        info?.displayError(message: message)
        IALoader.shared.hide()
    }
    
    private func changeGradientViewColor(_ fromColor: UIColor, toColor: UIColor) {
        backgroundView.initialGradientColor = fromColor
        backgroundView.endGradientColor = toColor
        backgroundView.cornerRadius = 5.0
        backgroundView.startPoint = CGPoint.init(x: 0.0, y: 0.5)
        backgroundView.endPoint = CGPoint.init(x: 1.0, y: 0.5)
    }
    
    func displayBeneficiaries(viewModel: PolicyDetail.PolicyBeneficiaries.ViewModel) {
        self.beneficiaries?.reloadData(items: viewModel.items)
    }
    
    func displayBeneficiariesToWallet(viewModel: PolicyDetail.BeneficiaresToWallet.ViewModel) {
        IALoader.shared.hide()
        router?.goToSelectionBeneficiaresToWallet(source: viewModel.items)
    }
    
    func displayBeneficiariesErrortoWallet() {
        IALoader.shared.hide()
        router?.routeToWallet()
    }
    
    func displayBeneficiariesError(type: IAErrorAlertType, message: String) {
        self.beneficiaries?.displayError(type: type, message: message)
    }
    
    func displayCoverages(viewModel: PolicyDetail.PolicyCoverages.ViewModel) {
        self.cobertures?.reloadCollectionView(with: viewModel.items)
    }
    
    func displayCoveragesError(type: IAErrorAlertType, message: String) {
        self.cobertures?.displayError(type: type, message: message)
    }
    
    func displayWebPage() {
        router?.routeToWebPage()
    }
    
    private func refreshPolicyPrincipalInProfile() {
        let profileVC = navigationController?.viewControllers.first(where: ({ $0 is ProfileViewController })) as? ProfileViewController
        profileVC?.loadData()
    }
}

//MARK: - SegmentedControl Value Changed
extension PolicyDetailViewController {
    
    @IBAction func segmentedControlValueChanged(_ sender: UISegmentedControl) {
        UIView.animate(withDuration: 0.1, animations: {
            self.container.alpha = 0.0
            self.container.transform = CGAffineTransform.identity.translatedBy(x: 0, y: -5)
        }) { (completed) in
            self.currentViewController?.view.removeFromSuperview()
            self.currentViewController?.removeFromParentViewController()
            
            self.displayCurrentTab(sender.selectedSegmentIndex)
            self.container.transform = CGAffineTransform.identity.translatedBy(x: 0, y: 5)
            UIView.animate(withDuration: 0.2) {
                self.container.alpha = 1.0
                self.container.transform = CGAffineTransform.identity.translatedBy(x: 0, y: 0)
            }
        }
    }
    
    func displayCurrentTab(_ tabIndex: Int){
        if let vc = viewControllerForSelectedSegmentIndex(tabIndex) {
            
            self.addChildViewController(vc)
            vc.didMove(toParentViewController: self)
            
            vc.view.frame = self.container.bounds
            self.container.addSubview(vc.view)
            self.currentViewController = vc
        }
    }
    
    func viewControllerForSelectedSegmentIndex(_ index: Int) -> UIViewController? {
        switch index {
        case 0:
            return info
        case 1:
            return cobertures
        case 2:
            return assistences
        case 3:
            return beneficiaries
        default:
            return nil
        }
    }
    
}

extension PolicyDetailViewController: UIViewControllerTransitioningDelegate {
    func animationController(forPresented presented: UIViewController, presenting: UIViewController, source: UIViewController) -> UIViewControllerAnimatedTransitioning? {
        return imageExpandAnimationController
    }
    
    func animationController(forDismissed dismissed: UIViewController) -> UIViewControllerAnimatedTransitioning? {
        return imageShrinkAnimationController
    }
}
