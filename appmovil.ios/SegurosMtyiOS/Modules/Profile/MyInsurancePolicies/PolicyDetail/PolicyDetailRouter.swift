//
//  PolicyDetailRouter.swift
//  SegurosMtyiOS
//
//  Created by Isidro Adan Garcia Solorio  on 1/8/18.
//  Copyright (c) 2018 IA Interactive. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PolicyDetailRoutingLogic {
    func passDataToProfile(source: PolicyDetailDataStore?, destination: inout ProfileDataStore?)
    func routeToWallet()
    func passDataToWallet(source: PolicyDetailDataStore?, destination: inout PolicyDetailDataStore?)
    func routeToAssistanceDetail(assistenceType: AssistanceType)
    func routeToWebPage()
    func routerToCertificate()
    func goToSelectionBeneficiaresToWallet(source: [Beneficiarie])
}

protocol PolicyDetailDataPassing {
    var dataStore: PolicyDetailDataStore? { get set }
}

class PolicyDetailRouter: NSObject, PolicyDetailRoutingLogic, PolicyDetailDataPassing {
    weak var viewController: PolicyDetailViewController?
    var dataStore: PolicyDetailDataStore?
    
    func routeToWallet() {
        let storyboard = UIStoryboard.policyDetail()
        if let destinationVC = storyboard.instantiateViewController(withIdentifier: "Wallet") as? PolicyWalletViewController {
            var destinationDS = destinationVC.router?.dataStore
            passDataToWallet(source: self.dataStore, destination: &destinationDS)
            navigateTo(source: viewController!, destination: destinationVC)
        }
    }
    
    // MARK: Passing data
    func passDataToWallet(source: PolicyDetailDataStore?, destination: inout PolicyDetailDataStore?){
        destination?.needsUpdate = source?.needsUpdate ?? false
        destination?.policy = source?.policy
    }
    
    func passDataToProfile(source: PolicyDetailDataStore?, destination: inout ProfileDataStore?){
        destination?.needsUpdateInsurancePolicies = source?.needsUpdate ?? false
    }
    
    func navigateTo(source: UIViewController, destination: UIViewController) {
        source.show(destination, sender: source)
    }
    
    func routeToAssistanceDetail(assistenceType: AssistanceType) {
        let storyBoard = UIStoryboard.policyDetail()
        guard let destinationVC = storyBoard.instantiateViewController(withIdentifier: "assistanceDetail") as? PolicyAssistanceDetailViewController else { return }
        destinationVC.transitioningDelegate = self.viewController
        var destinationDS = destinationVC.router?.dataStore
        passDataToAssistanceDetail(assistenceType: assistenceType ,destination: &destinationDS)
        navigateToAssistanceDetail(source: viewController!, destination: destinationVC)
    }
    
    func routerToCertificate() {
        let storyboard = UIStoryboard.policyDetail()
        guard let destinationVC = storyboard.instantiateViewController(withIdentifier: "certificateDetail") as? PolicyCertificateViewController else { return }
        var destinationDS = destinationVC.router?.dataStore
        destinationVC.hidesBottomBarWhenPushed = true
        passDataToCertificate(source: dataStore, destination: &destinationDS)
        navigateTo(source: viewController!, destination: destinationVC)
    }
    
    func passDataToCertificate(source: PolicyDetailDataStore?, destination: inout PolicyCertificateDataStore?){
        destination?.policyId = source?.policy?.policyId ?? ""
        destination?.certificateId = source?.policy?.certificateId ?? ""
    }
    
    func routeToWebPage() {
        UIApplication.shared.open(URL(string: LocalizableKeys.Profile.PolicyDetail.coveragesWebPage)!, options: [:], completionHandler: nil)
    }
    
    func goToSelectionBeneficiaresToWallet(source: [Beneficiarie]) {
        let storyboard = UIStoryboard.policyDetail()
        guard let destinationVC = storyboard.instantiateViewController(withIdentifier: "PolicySelectionBeneficiariesToWalletViewController") as? PolicySelectionBeneficiariesToWalletViewController else { return }
        destinationVC.router?.dataStore?.policy = self.dataStore?.policy
        destinationVC.router?.dataStore?.beneficiaries = source
        self.viewController?.present(destinationVC, animated: true, completion: nil)
    }
    
    // MARK: - Navigation
    func navigateToAssistanceDetail(source: UIViewController, destination: UIViewController) {
        DispatchQueue.main.async {
            source.present(destination, animated: true, completion: nil)
        }
    }
    
    // MARK: - Passing data
    func passDataToAssistanceDetail(assistenceType: AssistanceType, destination: inout PolicyAssistanceDetailDataStore?) {
        destination?.assistance = assistenceType
    }
}
