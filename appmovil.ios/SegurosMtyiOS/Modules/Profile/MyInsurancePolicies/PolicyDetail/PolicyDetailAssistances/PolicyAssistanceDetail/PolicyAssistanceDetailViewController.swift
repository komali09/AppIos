//
//  PolicyAssistanceDetailViewController.swift
//  SegurosMtyiOS
//
//  Created by Isidro Adan Garcia Solorio  on 1/24/18.
//  Copyright (c) 2018 IA Interactive. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PolicyAssistanceDetailDisplayLogic: class {
    func displayData(viewModel: PolicyAssistanceDetail.Something.ViewModel)
    func displayRemoteData(viewModel: [AssistanceItem])
    func displayError(type: IAErrorAlertType, message: String)
}

class PolicyAssistanceDetailViewController: UIViewController, ExpiredSessionDisplayLogic {
    var interactor: PolicyAssistanceDetailBusinessLogic?
    var router: (NSObjectProtocol & PolicyAssistanceDetailRoutingLogic & PolicyAssistanceDetailDataPassing)?
    
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var headerImage: UIImageView!
    @IBOutlet weak var subtitle: UILabel!
    @IBOutlet weak var titleLabel: UILabel!
    @IBOutlet weak var closeButton: UIButton!
    @IBOutlet weak var errorView: IAErrorView!
    @IBOutlet weak var loadingView: UIActivityIndicatorView!
    @IBOutlet weak var assistanceButton: IAGradientButton!
    
    var items:[AssistanceItem] = []
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = PolicyAssistanceDetailInteractor()
        let presenter = PolicyAssistanceDetailPresenter()
        let router = PolicyAssistanceDetailRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        self.loadData()
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        UIView.animate(withDuration: 0.3) {
            self.closeButton.alpha = 1
            self.assistanceButton.alpha = 1
        }
    }
    
    func loadData() {
        interactor?.loadData()
        interactor?.loadRemoteData()
        loadingView.isHidden = false
        loadingView.startAnimating()
    }
    
    @IBAction func closePressed(_ sender: Any) {
        self.closeButton.alpha = 0
        self.assistanceButton.alpha = 0
        self.dismiss(animated: true, completion: nil)
    }
    
    @IBAction func assistancePressed(_ sender: Any) {
        self.router?.goToAssitanceInfo()
    }
}

extension PolicyAssistanceDetailViewController: PolicyAssistanceDetailDisplayLogic {
    func displayData(viewModel: PolicyAssistanceDetail.Something.ViewModel) {
        self.headerImage.image = viewModel.assistanceType.image
        self.titleLabel.textColor = viewModel.assistanceType.color
        self.subtitle.textColor = viewModel.assistanceType.color
        
        self.titleLabel.text = viewModel.assistanceType.stringValue.uppercased()
    }
    func displayRemoteData(viewModel: [AssistanceItem]) {
        loadingView.isHidden = true
        loadingView.stopAnimating()
        self.items = viewModel
        self.tableView.reloadData()
        self.errorView.hide()
    }
    
    func displayError(type: IAErrorAlertType, message: String) {
        self.loadingView.isHidden = true
        loadingView.stopAnimating()
        
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.4) {
            self.errorView?.show(type: type, message: message, actionMessage: LocalizableKeys.General.AlertOptions.reintentar, action: {
                self.loadingView.isHidden = false
                self.loadingView.startAnimating()
                self.interactor?.loadRemoteData()
            })
        }
    }
}

extension PolicyAssistanceDetailViewController: UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return items.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let item = items[indexPath.row]
        var _cell: UITableViewCell?
        if item.exclusions == nil && item.limitations == nil {
            _cell = tableView.dequeueReusableCell(withIdentifier: "cellSmall")
        } else {
            _cell = tableView.dequeueReusableCell(withIdentifier: "cell")
        }
        guard let cell = _cell as? PolicyAssistanceDetailViewCell else { return _cell! }
        cell.setup(items[indexPath.row])
        return cell
    }
}


extension PolicyAssistanceDetailViewController: ImageExpandAnimationControllerProtocol {
    func getImageDestinationFrame() -> CGRect {
        view.layoutIfNeeded()
        return headerImage.frame
    }
}

extension PolicyAssistanceDetailViewController: ImageShrinkAnimationControllerProtocol {
    func getInitialImageFrame() -> CGRect {
        view.layoutIfNeeded()
        return headerImage.frame
    }
}

// MARK: - UIScrollViewDelegate
extension PolicyAssistanceDetailViewController: UIScrollViewDelegate {
    func scrollViewDidScroll(_ scrollView: UIScrollView) {
        let yTransform = scrollView.contentOffset.y * 0.4
        self.headerImage.transform = CGAffineTransform.identity.translatedBy(x: 0, y: -yTransform)
        self.subtitle.transform = CGAffineTransform.identity.translatedBy(x: 0, y: yTransform)
        self.titleLabel.transform = CGAffineTransform.identity.translatedBy(x: 0, y: yTransform)
    }
}

