//
//  PolicySelectionBeneficiariesToWalletViewController.swift
//  SegurosMtyiOS
//
//  Created by Erwin Jonnatan Perez TÃ©llez on 01/03/18.
//  Copyright (c) 2018 IA Interactive. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PolicySelectionBeneficiariesToWalletDisplayLogic: class {
    func displayGetBeneficiares(viewModel: PolicySelectionBeneficiariesToWallet.GetBeneficiares.ViewModel)
    func displayShowWallet()
    func displayError(message: String)
}

class PolicySelectionBeneficiariesToWalletViewController: IAPopupViewController {
    var interactor: PolicySelectionBeneficiariesToWalletBusinessLogic?
    var router: (NSObjectProtocol & PolicySelectionBeneficiariesToWalletRoutingLogic & PolicySelectionBeneficiariesToWalletDataPassing)?
    
    //@IBOutlet weak var someTextField: UITextField!
    @IBOutlet weak var tableViewBeneficiares: UITableView!
    
    var cellIdentifier = "selectionBeneficiareToWalletTableViewCell"
    
    var beneficiares: [Beneficiarie]? {
        didSet {
            self.tableViewBeneficiares.reloadData()
        }
    }
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = PolicySelectionBeneficiariesToWalletInteractor()
        let presenter = PolicySelectionBeneficiariesToWalletPresenter()
        let router = PolicySelectionBeneficiariesToWalletRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupTableView()
        interactor?.getBeneficiares()
    }
    
    private func setupTableView() {
        self.tableViewBeneficiares.delegate = self
        self.tableViewBeneficiares.dataSource = self
    }
    
    // MARK: Do something
    @IBAction func closePressed(_ sender: Any) {
        router?.goToDetailPolicy()
    }
    
    @IBAction func continuePressed(_ sender: Any) {
        interactor?.showWallet()
    }
}

//MARK: - PolicySelectionBeneficiariesToWalletDisplayLogic
extension PolicySelectionBeneficiariesToWalletViewController: PolicySelectionBeneficiariesToWalletDisplayLogic {
    func displayGetBeneficiares(viewModel: PolicySelectionBeneficiariesToWallet.GetBeneficiares.ViewModel) {
        self.beneficiares = viewModel.beneficiares
    }
    
    func displayShowWallet() {
        router?.goToDetailWallet()
    }
    
    func displayError(message: String) {
        self.showAlert(with: nil, message: message, actionTitle: LocalizableKeys.General.AlertOptions.accept) { (action) in
            self.router?.goToDetailPolicy()
        }
    }
}

//MARK: - UITableViewDelegate
extension PolicySelectionBeneficiariesToWalletViewController : UITableViewDelegate, UITableViewDataSource {
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.beneficiares == nil ? 1 : ((self.beneficiares?.count)! + 1)
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: cellIdentifier) as! SelectionBeneficiareToWalletTableViewCell
        
        if let indexPathSelected = self.router?.dataStore?.indexPathSelected {
            if indexPathSelected == indexPath {
                if indexPath.row == 0 {
                    cell.configureCell(titularName: self.router?.dataStore?.policy?.titularName ?? "", isCurrentSelection: true)
                } else {
                   cell.configureCell(beneficiare: self.beneficiares![indexPath.row - 1], isCurrentSelection: true)
                }
            } else {
                if indexPath.row == 0 {
                    cell.configureCell(titularName: self.router?.dataStore?.policy?.titularName ?? "", isCurrentSelection: false)
                } else {
                    cell.configureCell(beneficiare: self.beneficiares![indexPath.row - 1], isCurrentSelection: false)
                }
            }
        } else {
            if indexPath.row == 0 {
                cell.configureCell(titularName: self.router?.dataStore?.policy?.titularName ?? "", isCurrentSelection: false)
            } else {
                cell.configureCell(beneficiare: self.beneficiares![indexPath.row - 1], isCurrentSelection: false)
            }
        }
        
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        if let indexPathSelected = self.router?.dataStore?.indexPathSelected {
            if indexPathSelected == indexPath {
                return
            }
        }
        
        if indexPath.row == 0 {
            interactor?.setBeneficiareSelected(beneficiare: nil, indexPath: indexPath)
        } else {
            interactor?.setBeneficiareSelected(beneficiare: self.beneficiares![indexPath.row - 1], indexPath: indexPath)
        }
        
        guard let cell = tableView.cellForRow(at: indexPath) as? SelectionBeneficiareToWalletTableViewCell else { return }
        cell.check.image = UIImage(named: "checkRadio")
        
        tableView.reloadData()
    }
}
