//
//  PolicyWalletInteractor.swift
//  SegurosMtyiOS
//
//  Created by Isidro Adan Garcia Solorio  on 1/19/18.
//  Copyright (c) 2018 IA Interactive. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import RxSwift

protocol PolicyWalletBusinessLogic {
    func loadData()
    func getWallet()
}

class PolicyWalletInteractor: PolicyWalletBusinessLogic, PolicyDetailDataStore {
    var presenter: (PolicyWalletPresentationLogic & ErrorPresentationLogic & ExpiredSessionPresentationLogic)?
    var worker: PolicyDetailWorker?
    var profileWorker: ProfileWorker?
    var disposableBag: DisposeBag = DisposeBag()
    
    // MARK: DataStore
    var policy: InsurancePolicy?
    var needsUpdate: Bool = false
    var isTitularBeneficiare: Bool = true
    var beneficiareName: String?
    var beneficiareFatherName: String?
    var beneficiareMotherName: String?
    
    // MARK: Do something
    
    func loadData() {
        guard var policy = self.policy else { return }
        
        if isTitularBeneficiare == false {
            policy.titularName = "\(String(describing: beneficiareName ?? "")) \(String(describing: beneficiareFatherName ?? "")) \(String(describing: beneficiareMotherName ?? ""))"
        }
        
        if let isTitular = self.policy?.isTitular {
            if isTitular == false{
                
                if profileWorker == nil {
                    profileWorker = ProfileWorker()
                }
                
                if let user = profileWorker?.loadUserInfo() {
                    policy.titularName = "\(String(describing: user.firstName)) \(String(describing: user.lastName))"
                }
            }
        }
        
        presenter?.presentPolicy(response: policy)
    }
    
    func getWallet() {
        guard let policy = self.policy else { return }
        worker = PolicyDetailWorker()
        
        self.worker?.getWallet(isTitularBeneficiare: self.isTitularBeneficiare, nameBeneficiare: self.beneficiareName, fatherNameBeneficiare: self.beneficiareFatherName, motherNameBeneficiare: self.beneficiareMotherName, policyId: policy.policyId, certificateId: policy.certificateId).subscribe({ (event) in
            switch event {
            case .next(let pass):
                self.presenter?.presentWallet(response: pass)
            case .error(let error):
                switch error {
                case NetworkingError.unauthorized:
                    self.presenter?.presentExpiredSession()
                default:
                    self.presenter?.presentError(error)
                }
            default:
                break
            }
        }).disposed(by: disposableBag)
    }
}
