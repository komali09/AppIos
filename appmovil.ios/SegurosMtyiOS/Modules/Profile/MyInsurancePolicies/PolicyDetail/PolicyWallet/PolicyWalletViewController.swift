//
//  PolicyWalletViewController.swift
//  SegurosMtyiOS
//
//  Created by Isidro Adan Garcia Solorio  on 1/19/18.
//  Copyright (c) 2018 IA Interactive. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import PassKit

protocol PolicyWalletDisplayLogic: class {
    func displayPolicy(viewModel: PolicyWallet.LoadData.ViewModel)
    func displayWallet(viewModel: PKPass)
}

class PolicyWalletViewController: UIViewController, ErrorDisplayLogic, ExpiredSessionDisplayLogic {
    var interactor: PolicyWalletBusinessLogic?
    var router: (NSObjectProtocol & PolicyWalletRoutingLogic & PolicyWalletDataPassing)?
    
    @IBOutlet weak var backgroundView: IAGradientView!
    @IBOutlet weak var policyNumber: UILabel!
    @IBOutlet weak var policyExpDate: UILabel!
    @IBOutlet weak var userName: UILabel!
    @IBOutlet weak var certificateView: UIStackView!
    @IBOutlet weak var policyCertificate: UILabel!
    @IBOutlet weak var policyName: UILabel!
    @IBOutlet weak var planName: UILabel!
    @IBOutlet weak var policyIcon: UIImageView!
    @IBOutlet weak var backgroundIcon: UIImageView!
    @IBOutlet weak var policyType: UILabel!
    @IBOutlet weak var policyCode: UILabel!
    @IBOutlet weak var barCode: UIImageView!
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = PolicyWalletInteractor()
        let presenter = PolicyWalletPresenter()
        let router = PolicyWalletRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        loadData()
        self.title = "Credencial digital"

    }
    
    // MARK: load data
    func loadData() {
        self.interactor?.loadData()
    }
    
    @IBAction func getAppleWallet(_ sender: Any) {
        IALoader.shared.show("Obteniendo Apple Wallet")
        self.interactor?.getWallet()
    }
    
}

extension PolicyWalletViewController: PolicyWalletDisplayLogic {
    func displayPolicy(viewModel: PolicyWallet.LoadData.ViewModel) {
        let firstColor = viewModel.cardId.gradientPrimaryColor
        let secondColor = viewModel.cardId.gradientSecondaryColor
        changeGradientViewColor(firstColor, toColor: secondColor)
        
        userName.text = viewModel.userName
        policyName.text = viewModel.name
        policyNumber.text = viewModel.number
        planName.text = viewModel.planName
        policyExpDate.text = viewModel.expDate
        policyCertificate.text = viewModel.certificateId
        policyIcon.image = viewModel.cardId.icon
        certificateView.isHidden = viewModel.isCertificateHidden
        policyType.text = viewModel.planForm
        policyCode.text = viewModel.policyCode
        let barcodeSize = barCode.bounds.size
        barCode.image = UIImage.Pdf417(from: viewModel.policyCode, size: barcodeSize)
        
        switch viewModel.cardId {
        case .optaMedica:
            backgroundIcon.image = nil
        default:
            break
        }
        
        planName.isHidden = viewModel.cardId != .alfaMedical
        switch viewModel.cardId {
        case .alfaMedicalInternational:
            policyName.text = LocalizableKeys.Profile.MyInsurancePolicies.alfaMedicalCardLabel
            planName.text = LocalizableKeys.Profile.MyInsurancePolicies.alfaMedicalInternationalCardLabel
            planName.isHidden = false
        default:
            break
        }
    }
    
    private func changeGradientViewColor(_ fromColor: UIColor, toColor: UIColor) {
        backgroundView.initialGradientColor = fromColor
        backgroundView.endGradientColor = toColor
        backgroundView.cornerRadius = 5.0
        backgroundView.startPoint = CGPoint.init(x: 0.0, y: 0.5)
        backgroundView.endPoint = CGPoint.init(x: 1.0, y: 0.5)
    }
    
    func displayWallet(viewModel: PKPass) {
        IALoader.shared.hide()
        let vc = PKAddPassesViewController(pass: viewModel) as PKAddPassesViewController
        self.present(vc, animated: true, completion: nil)

    }
}
