//
//  PolicyCertificateInteractor.swift
//  SegurosMtyiOS
//
//  Created by Isidro Adan Garcia Solorio  on 2/28/18.
//  Copyright (c) 2018 IA Interactive. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
import RxSwift

protocol PolicyCertificateBusinessLogic {
    func getCertificate()
}

protocol PolicyCertificateDataStore {
    var policyId: String { get set }
    var certificateId: String { get set }
    var filePath: URL? { get set }
}

class PolicyCertificateInteractor: PolicyCertificateBusinessLogic, PolicyCertificateDataStore {
    var presenter: (PolicyCertificatePresentationLogic & ErrorPresentationLogic & ExpiredSessionPresentationLogic)?
    var worker: PolicyDetailWorker?
    var disposableBag: DisposeBag = DisposeBag()
    // MARK: DataStore
    
    var policyId: String = ""
    var certificateId: String = ""
    
    var filePath: URL?
    // MARK: Do something
    
    func getCertificate() {
        worker = PolicyDetailWorker()
        
        self.worker?.getCertificate(with: policyId, certificateId: certificateId).subscribe({ (event) in
            switch event {
            case .next(let filePath):
                self.filePath = filePath
                let response = PolicyCertificate.CertificateFile.Response(filePath: filePath)
                self.presenter?.presentFile(response: response)
            case .error(let error):
                switch error {
                case NetworkingError.unauthorized:
                    self.presenter?.presentExpiredSession()
                default:
                    self.presenter?.presentError(error)
                }
            default:
                break
            }
        }).disposed(by: disposableBag)
    }
}
