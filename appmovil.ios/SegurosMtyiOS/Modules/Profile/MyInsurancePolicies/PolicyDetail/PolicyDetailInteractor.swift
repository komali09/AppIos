//
//  PolicyDetailInteractor.swift
//  SegurosMtyiOS
//
//  Created by Isidro Adan Garcia Solorio  on 1/8/18.
//  Copyright (c) 2018 IA Interactive. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import RxSwift

protocol PolicyDetailBusinessLogic {
    func loadPolicyData()
    func setPrincipalPolicy()
    func loadBeneficiariesData()
    func loadCoveragesData()
    func loadWebPage()
    func loadBeneficiariesDataToWallet()
}

protocol PolicyDetailDataStore {
    var policy: InsurancePolicy? { get set }
    var needsUpdate: Bool { get set }
    var isTitularBeneficiare: Bool { get set }
    var beneficiareName: String? { get set }
    var beneficiareFatherName: String? { get set }
    var beneficiareMotherName: String? { get set }
}

class PolicyDetailInteractor: PolicyDetailBusinessLogic, PolicyDetailDataStore {
    var presenter: (PolicyDetailPresentationLogic & ExpiredSessionPresentationLogic & ErrorPresentationLogic)?
    var disposableBag: DisposeBag = DisposeBag()
    var worker: PolicyDetailWorker?
    
    // MARK: DataStore
    var policy: InsurancePolicy?
    var needsUpdate: Bool = false
    var isTitularBeneficiare: Bool = false
    var beneficiareName: String?
    var beneficiareFatherName: String?
    var beneficiareMotherName: String?
    
    func loadPolicyData() {
        guard let policy = self.policy else { return }
        presenter?.presentPolicyDetail(response: policy)
        
        if worker == nil {
            worker = PolicyDetailWorker()
        }
        worker?.getInsurancePolicyDetail(policyId: policy.policyId, certificateId: policy.certificateId).subscribe({ [weak self] event in
            switch event {
            case .next(let result):

                self?.policy = result
                self?.presenter?.presentPolicyDetail(response: result)
                self?.presenter?.presentRemotePolicyDetail(response: result)
            case .error(let error):
                self?.presenter?.presentPolicyDetail(response: policy)
                switch error {
                case NetworkingError.unauthorized:
                    self?.presenter?.presentExpiredSession()
                default:
                    self?.presenter?.presentPolicyDetailError(error: error)
                }
            default:
                break
            }
        }).disposed(by: self.disposableBag)
    }
    
    func loadBeneficiariesData() {
        guard let policy = self.policy else { return }
        
        let worker = PolicyDetailWorker()
        
        worker.getInsurancePolicyBeneficiaries(policyId: policy.policyId, certificateId: policy.certificateId).subscribe({ [weak self] event in
            switch event {
            case .next(let result):
                self?.presenter?.presentBeneficiaries(response: result)
            case .error(let error):
                switch error {
                case NetworkingError.unauthorized:
                    self?.presenter?.presentExpiredSession()
                default:
                    self?.presenter?.presentBeneficiariesError(error: error)
                }
            default:
                break
            }
        }).disposed(by: self.disposableBag)
    }
    
    func loadBeneficiariesDataToWallet() {
        guard let policy = self.policy else { return }
        
        if policy.isTitular! == false {
            self.presenter?.presentBeneficiariesErrorToWallet()
            return 
        }
        
        let worker = PolicyDetailWorker()
        
        worker.getInsurancePolicyBeneficiaries(policyId: policy.policyId, certificateId: policy.certificateId).subscribe({ [weak self] event in
            switch event {
            case .next(let result):
                self?.presenter?.presentBeneficiariesToWallet(response: result)
            case .error(let error):
                switch error {
                case NetworkingError.unauthorized:
                    self?.presenter?.presentExpiredSession()
                case NetworkingError.noInternet:
                    if (self?.policy?.isTitular)! {
                        self?.presenter?.presentError(NetworkingError.noInternet)
                    } else {
                        self?.presenter?.presentBeneficiariesErrorToWallet()
                    }
                case NetworkingError.noSuccessStatusCode(let code, _):
                    if code == 1 { //No tiene asegurados
                        self?.presenter?.presentBeneficiariesErrorToWallet()
                    } else {
                        if (self?.policy?.isTitular)! {
                            self?.presenter?.presentError(NetworkingError.unknown)
                        } else {
                            self?.presenter?.presentBeneficiariesErrorToWallet()
                        }
                    }
                case NetworkingError.noData:
                    self?.presenter?.presentBeneficiariesErrorToWallet()
                default:
                    if (self?.policy?.isTitular)! {
                        self?.presenter?.presentError(NetworkingError.unknown)
                    } else {
                        self?.presenter?.presentBeneficiariesErrorToWallet()
                    }
                }
            default:
                break
            }
        }).disposed(by: self.disposableBag)
    }
    
    func loadCoveragesData() {
        guard let policy = self.policy else { return }
        
        let worker = PolicyDetailWorker()
        
        worker.getInsurancePolicyCoverages(policyId: policy.policyId, certificateId: policy.certificateId).subscribe({ [weak self] event in
            switch event {
            case .next(let result):
                self?.presenter?.presentCoverages(response: result)
            case .error(let error):
                switch error {
                case NetworkingError.unauthorized:
                    self?.presenter?.presentExpiredSession()
                default:
                    self?.presenter?.presentCoveragesError(error: error)
                }
            default:
                break
            }
        }).disposed(by: self.disposableBag)
    }
    
    func loadWebPage() {
        self.presenter?.presentWebPage()
    }
    
    func setPrincipalPolicy() {
        guard let policy = self.policy else { return }
        
        if worker == nil {
            worker = PolicyDetailWorker()
        }
        worker?.setPrincipalPlan(policyId: policy.policyId, certificateId: policy.certificateId).subscribe({ [weak self] event in
            switch event {
            case .next(_):
                UserDefaultsManager.shared.userInfo?.polizy = policy.policyId
                self?.policy?.setAsPrincipal()
                self?.needsUpdate = true
                if let mainPolicy = self?.policy {
                    self?.presenter?.presentPolicyDetail(response: mainPolicy)
                    self?.presenter?.presentRemotePolicyDetail(response: mainPolicy)
                } else {
                    self?.presenter?.presentError(WorkerError.unknown)
                }
            case .error(let error):
                switch error {
                case NetworkingError.unauthorized:
                    self?.presenter?.presentExpiredSession()
                default:
                    self?.presenter?.presentError(error)
                }
            default:
                break
            }
        }).disposed(by: self.disposableBag)
        
        
    }
}
