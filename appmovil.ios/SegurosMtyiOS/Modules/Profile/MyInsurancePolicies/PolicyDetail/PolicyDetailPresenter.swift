//
//  PolicyDetailPresenter.swift
//  SegurosMtyiOS
//
//  Created by Isidro Adan Garcia Solorio  on 1/8/18.
//  Copyright (c) 2018 IA Interactive. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

protocol PolicyDetailPresentationLogic {
    func presentPolicyDetail(response: InsurancePolicy)
    func presentRemotePolicyDetail(response: InsurancePolicy)
    func presentPolicyDetailError(error: Error)
    
    func presentBeneficiaries(response: [Beneficiarie])
    func presentBeneficiariesToWallet(response: [Beneficiarie])
    func presentBeneficiariesError(error: Error)
    func presentBeneficiariesErrorToWallet()
    
    func presentWebPage()
    
    func presentCoverages(response: [Coverage])
    func presentCoveragesError(error: Error)
}

class PolicyDetailPresenter: PolicyDetailPresentationLogic {
    weak var viewController: (PolicyDetailDisplayLogic & ExpiredSessionDisplayLogic & ErrorDisplayLogic)?
    
    // MARK: Do something
    
    func presentPolicyDetail(response: InsurancePolicy) {
        
        let deductible = PolicyDetailInfoDataItem(title: LocalizableKeys.Profile.PolicyDetail.deducible, detail: response.deductible?.SMGMString())
        let coassurance = PolicyDetailInfoDataItem(title: LocalizableKeys.Profile.PolicyDetail.coassurance, detail: response.coassurance?.percentageString())
        let policyType = PolicyDetailInfoDataItem(title: LocalizableKeys.Profile.PolicyDetail.policyType, detail: response.planForm.stringValue)
        let endDate = PolicyDetailInfoDataItem(title: LocalizableKeys.Profile.PolicyDetail.endDate, detail: response.endDate.shortDate())
        
        let items = [deductible, coassurance, policyType, endDate]
        
        let viewModel = PolicyDetail.loadPolicyDetail.ViewModel(expDate: response.endDate.monthYear().capitalized,
                                                                name: response.productName.capitalized,
                                                                planName: response.planName.capitalized,
                                                                number: response.policyId.uppercased(),
                                                                certificateId: response.certificateId?.uppercased(),
                                                                cardId: response.cardId,
                                                                planForm: response.planForm,
                                                                isFavHidden: !response.isMainPolicy,
                                                                items: items)
        
        
        viewController?.displayPolicy(viewModel: viewModel)
    }
    
    func presentRemotePolicyDetail(response: InsurancePolicy) {
        var items: [PolicyDetailInfoDataItem?] = []
        
        let deductible = PolicyDetailInfoDataItem(title: LocalizableKeys.Profile.PolicyDetail.deducible, detail: response.deductible?.SMGMString())
        let nationalDeductible = PolicyDetailInfoDataItem(title: LocalizableKeys.Profile.PolicyDetail.nationalDeductible, detail: response.nationalDeductible?.SMGMString())
        let internationalDeductible = PolicyDetailInfoDataItem(title: LocalizableKeys.Profile.PolicyDetail.internationalDeductible, detail: response.internationalDeductible?.SMGMString())
        let coassurance = PolicyDetailInfoDataItem(title: LocalizableKeys.Profile.PolicyDetail.coassurance, detail: response.coassurance?.percentageString())
        let nationalCoassurance = PolicyDetailInfoDataItem(title: LocalizableKeys.Profile.PolicyDetail.nationalCoassurance, detail: response.nationalCoassurance?.percentageString())
        let internationalCoassurance = PolicyDetailInfoDataItem(title: LocalizableKeys.Profile.PolicyDetail.internationalCoassurance, detail: response.internationalCoassurance?.percentageString())
        let topCoassurance = PolicyDetailInfoDataItem(title: LocalizableKeys.Profile.PolicyDetail.topCoassurance, detail: response.maxCoassurance)
        let coassuranceSum = PolicyDetailInfoDataItem(title: LocalizableKeys.Profile.PolicyDetail.coassuranceSum, detail: response.assuredSum?.currencyString())
        let collectiveCoassuranceSum = PolicyDetailInfoDataItem(title: LocalizableKeys.Profile.PolicyDetail.coassuranceSum, detail: response.assuredSum)
        let currency = PolicyDetailInfoDataItem(title: LocalizableKeys.Profile.PolicyDetail.currency, detail: response.currency?.capitalized)
        let startDate = PolicyDetailInfoDataItem(title: LocalizableKeys.Profile.PolicyDetail.startDate, detail: response.startDate?.shortDate())
        let endDate = PolicyDetailInfoDataItem(title: LocalizableKeys.Profile.PolicyDetail.endDate, detail: response.endDate.shortDate())
        let policyType = PolicyDetailInfoDataItem(title: LocalizableKeys.Profile.PolicyDetail.policyType, detail: response.planForm.stringValue.capitalized)
        let paymentFrecuency = PolicyDetailInfoDataItem(title: LocalizableKeys.Profile.PolicyDetail.paymentFrecuency, detail: response.paymentFrequency?.capitalized)
        let nextPayment = PolicyDetailInfoDataItem(title: LocalizableKeys.Profile.PolicyDetail.nextPayment, detail: response.nextPaymentDate?.shortDate())
        let policyAntiquity  = PolicyDetailInfoDataItem(title: LocalizableKeys.Profile.PolicyDetail.policyAntiquity, detail: response.emissionDate?.shortDate())
        
        switch response.planForm {
        
        case .individual:
            switch response.cardId {
            case .alfaMedical:
                items = [deductible, topCoassurance, coassurance, currency, coassuranceSum, paymentFrecuency, policyType, policyAntiquity, startDate, endDate, nextPayment]
            case .optaMedica:
                items = [deductible, topCoassurance, coassurance, currency, coassuranceSum, paymentFrecuency, policyType, policyAntiquity, startDate, endDate, nextPayment]
            case .alfaMedicalInternational:
                items = [nationalDeductible, internationalDeductible, nationalCoassurance, internationalCoassurance, topCoassurance, currency, coassuranceSum, paymentFrecuency, policyType, policyAntiquity, startDate, endDate, nextPayment]
            case .alfaMedicalFlexA:
                items = [coassuranceSum, currency, policyType, paymentFrecuency, startDate, endDate, nextPayment, policyAntiquity]
            }
        case .collective:
            items = [deductible, coassurance, currency, collectiveCoassuranceSum, policyType, startDate, endDate]
        }
        
        let copaymentParticipationItems = self.getPolicyCopaymentsParticipations(response: response)
        
        let viewModel = PolicyDetail.loadRemotePolicyDetail.ViewModel(isTitular: response.isTitular ?? false, items: items, copaymentParticipationItems: copaymentParticipationItems)
        viewController?.displayRemotePolicyData(viewModel: viewModel)
    }
    
    func getPolicyCopaymentsParticipations(response: InsurancePolicy) -> [PolicyCopaymentParticipationData]? {
        guard let copayments = response.copaymentsParticipations, copayments.count > 0 else { return nil }
        
        let shortStay = copayments.map { PolicyCopaymentParticipationDataItem(level: $0.hospitalLevel, copayment: $0.copaymentShortStay, participation: $0.participationShortStay) }
        let hospitalization = copayments.map { PolicyCopaymentParticipationDataItem(level: $0.hospitalLevel, copayment: $0.copaymentHospitalization, participation: $0.participationHospitalization) }
        let medicalConsultation = copayments.map { PolicyCopaymentParticipationDataItem(level: $0.hospitalLevel, copayment: $0.copaymentMedicalConsultation, participation: $0.participationMedicalConsultation) }
        let outsideHospitalServices = copayments.map { PolicyCopaymentParticipationDataItem(level: $0.hospitalLevel, copayment: $0.copaymentOutsideHospitalServices, participation: $0.participationOutsideHospitalServices) }
        
        var items: [PolicyCopaymentParticipationData] = []
        items.append(PolicyCopaymentParticipationData(title: LocalizableKeys.Profile.PolicyDetail.shortStay, items: shortStay))
        items.append(PolicyCopaymentParticipationData(title: LocalizableKeys.Profile.PolicyDetail.hospitalization, items: hospitalization))
        items.append(PolicyCopaymentParticipationData(title: LocalizableKeys.Profile.PolicyDetail.medicalConsultation, items: medicalConsultation))
        items.append(PolicyCopaymentParticipationData(title: LocalizableKeys.Profile.PolicyDetail.outsideHospitalServices, items: outsideHospitalServices))

        return items
    }
    
    func presentPolicyDetailError(error: Error) {
        switch error {
        case NetworkingError.noInternet:
            self.viewController?.displayPolicyError(message: LocalizableKeys.General.noInternet)
        default:
            self.viewController?.displayPolicyError(message: LocalizableKeys.General.serviceError)
        }
    }
}

extension PolicyDetailPresenter {
    func presentBeneficiaries(response: [Beneficiarie]) {
        let items = response.map { item -> BeneficiarieDataItem in
            let name = "\(item.name ?? "") \(item.fatherLastName ?? "") \(item.motherLastName ?? "") "
            let relationship = item.relationship ?? LocalizableKeys.General.noInformation
            return BeneficiarieDataItem(name: name.capitalized, relationship:  relationship.capitalized)
        }
        
        let viewModel = PolicyDetail.PolicyBeneficiaries.ViewModel(items: items)
        viewController?.displayBeneficiaries(viewModel: viewModel)
    }
    
    func presentBeneficiariesToWallet(response: [Beneficiarie]) {
        if response.count > 0 {
            let viewModel = PolicyDetail.BeneficiaresToWallet.ViewModel(items: response)
            viewController?.displayBeneficiariesToWallet(viewModel: viewModel)
        } else {
            viewController?.displayBeneficiariesErrortoWallet()
        }
    }
    
    func presentBeneficiariesError(error: Error) {
        switch error {
        case NetworkingError.noInternet:
            self.viewController?.displayBeneficiariesError(type: .noInternet, message: LocalizableKeys.General.noInternet)
        default:
            self.viewController?.displayBeneficiariesError(type: .noLocationsResults, message: "No se encontraron asegurados.")
        }
    }
    
    func presentBeneficiariesErrorToWallet() {
        self.viewController?.displayBeneficiariesErrortoWallet()
    }
    
    func presentWebPage() {
        viewController?.displayWebPage()
    }
    
    func presentCoverages(response: [Coverage]) {
        let viewModel = PolicyDetail.PolicyCoverages.ViewModel(items: response)
        viewController?.displayCoverages(viewModel: viewModel)
    }
    
    func presentCoveragesError(error: Error) {
        //TODO Coverages
        switch error {
        case NetworkingError.noInternet:
            self.viewController?.displayCoveragesError(type: .noInternet, message: LocalizableKeys.General.noInternet)
        default:
            self.viewController?.displayCoveragesError(type: .noLocationsResults, message: "No se encontraron coberturas en la póliza.")
        }
    }
}

extension PolicyDetailPresenter: ExpiredSessionPresentationLogic {
    func presentExpiredSession() {
        self.viewController?.displayExpiredSession()
    }
}

extension PolicyDetailPresenter: ErrorPresentationLogic {
    func presentError(_ error: Error) {
        switch error {
        case NetworkingError.noInternet:
            self.viewController?.displayError(with: LocalizableKeys.General.noInternet)
        default:
            self.viewController?.displayError(with: LocalizableKeys.General.serviceError)
        }
    }
}

