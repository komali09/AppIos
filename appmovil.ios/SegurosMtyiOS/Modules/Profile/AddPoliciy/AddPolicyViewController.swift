//
//  AddPolicyViewController.swift
//  SegurosMtyiOS
//
//  Created by Israel Guti√©rrez Castillo on 17/01/18.
//  Copyright (c) 2018 IA Interactive. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit


protocol AddPolicyDisplayLogic: class {
    func displayPolicyValidation(viewModel: AddPolicy.AddPolicyValid.ViewModel )
    func displayCertificatePolicy()
    func displayAddIndividualPolicy()
    func displayAddCollectivePolicy()
}

class AddPolicyViewController: UIViewController, ExpiredSessionDisplayLogic, ErrorDisplayLogic {
    
    var interactor: AddPolicyBusinessLogic?
    var router: (NSObjectProtocol & AddPolicyRoutingLogic & AddPolicyDataPassing)? = AddPolicyRouter()
    
    @IBOutlet weak var typePolicyGradientView: IAGradientView!
    @IBOutlet weak var newPolicyFloatingTextField: FloatingTextField!
    @IBOutlet weak var certificatePolicyFloatingTextField: FloatingTextField!
    
    @IBOutlet weak var policyInformationButton: UIButton!
    @IBOutlet weak var certificateInformationButton: UIButton!
    
    @IBOutlet weak var createPolicyButton: IAGradientButton!
    @IBOutlet weak var colectiveLabel: UILabel!
    
    private var isValidPolicy: Bool = false
    private var isValidCertificate: Bool = false
    
    private var isCertificateFieldHidden : Bool = true
    
    //@IBOutlet weak var someTextField: UITextField!
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = AddPolicyInteractor()
        let presenter = AddPolicyPresenter()
        let router = AddPolicyRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
    }
    
    private func setupUI() {
        self.title = LocalizableKeys.Profile.AddPolicy.screenTitle
        
        typePolicyGradientView.cornerRadius = 5.0
        
        newPolicyFloatingTextField.delegate = self
        certificatePolicyFloatingTextField.delegate = self
        certificatePolicyFloatingTextField.keyboardType = UIKeyboardType.alphabet.rawValue
        
        colectiveLabel.isHidden = true
        
        self.certificatePolicyFloatingTextField.isHidden = true
        self.certificateInformationButton.isHidden = true
    }
    
   
    
    @IBAction func createPolicyButtonPressed(_ sender: Any) {
        if self.router?.dataStore?.typePolicy == .collective && certificatePolicyFloatingTextField.text.isEmpty {
            isValidPolicy = false
        }
        if isValidPolicy && !newPolicyFloatingTextField.text.isEmpty {
            IALoader.shared.show(LocalizableKeys.Loader.addPolicy)
            if self.router?.dataStore?.typePolicy == .individual {
                self.certificateInformationButton.isHidden = true
                let request = AddPolicy.AddPolicyValid.Request(policy: self.newPolicyFloatingTextField.text, certicate: nil, type: .individual)
                self.interactor?.addIndividualPolicy(request: request)
            } else {
                let request = AddPolicy.AddPolicyValid.Request(policy: self.newPolicyFloatingTextField.text, certicate: self.certificatePolicyFloatingTextField.text, type: .collective )
                self.interactor?.addCollectivePolicy(request: request)
            }
        } else {
            if isCertificateFieldHidden {
                if newPolicyFloatingTextField.text.isEmpty {
                    newPolicyFloatingTextField.validate({ .invalid(message: LocalizableKeys.Register.registerWritePolicy) })
                } else {
                    self.displayError(with: LocalizableKeys.Register.invalidPolicy)
                }
            } else {
                if certificatePolicyFloatingTextField.text.isEmpty {
                    certificatePolicyFloatingTextField.validate({ .invalid(message: LocalizableKeys.Profile.AddPolicy.Error.emptyCertificate) })
                } else {
                    self.displayError(with: LocalizableKeys.Register.invalidPolicyColective)
                }
            }
        }
    }
    
    @IBAction func policyInformationButtonPressed(_ sender: Any) {
        self.router?.routeToPolicyInformation(.policy)
    }
    
    @IBAction func certificateInformationButtonPressed(_ sender: Any) {
        self.router?.routeToPolicyInformation(.certificate)
    }
    
    func displayColorToType(_ policyForm: PolicyType) {
        
        switch policyForm {

        case .collective:
            if !isCertificateFieldHidden {
                return
            }
            isCertificateFieldHidden = false
            self.colectiveLabel.isHidden = false
            self.typePolicyGradientView.animateToColors(PolicyCardType.alfaMedical.gradientPrimaryColor, toColor: PolicyCardType.alfaMedical.gradientSecondaryColor)
            self.certificatePolicyFloatingTextField.isHidden = false
            UIView.animate(withDuration: 0.25, animations: {
                self.typePolicyGradientView.layer.masksToBounds = false
                self.typePolicyGradientView.layer.shadowColor = PolicyCardType.alfaMedical.gradientSecondaryColor.withAlphaComponent(0.5).cgColor
                self.typePolicyGradientView.layer.shadowOffset = CGSize.init(width: 0.4, height: 15.0)
                self.typePolicyGradientView.layer.shadowOpacity = 0.4
                self.typePolicyGradientView.layer.shadowRadius = 4.5
                self.certificatePolicyFloatingTextField.alpha = 1.0
            })

        case .individual:
            if isCertificateFieldHidden {
                return
            }
            isCertificateFieldHidden = true
            self.colectiveLabel.isHidden = true
            self.certificatePolicyFloatingTextField.isValidating = false
            self.typePolicyGradientView.animateToColors(PolicyCardType.optaMedica.gradientPrimaryColor, toColor: PolicyCardType.optaMedica.gradientSecondaryColor)
            self.certificatePolicyFloatingTextField.isHidden = true
            self.certificateInformationButton.isHidden = true
            UIView.animate(withDuration: 0.25, animations: {
                self.typePolicyGradientView.layer.masksToBounds = false
                self.typePolicyGradientView.layer.shadowColor = PolicyCardType.optaMedica.gradientSecondaryColor.withAlphaComponent(0.5).cgColor
                self.typePolicyGradientView.layer.shadowOffset = CGSize.init(width: 0.4, height: 15.0)
                self.typePolicyGradientView.layer.shadowOpacity = 0.4
                self.typePolicyGradientView.layer.shadowRadius = 4.5
                self.certificatePolicyFloatingTextField.alpha = 0.0
            })
        }
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        typePolicyGradientView.layer.masksToBounds = false
        typePolicyGradientView.layer.shadowColor = PolicyCardType.optaMedica.gradientSecondaryColor.withAlphaComponent(0.5).cgColor
        typePolicyGradientView.layer.shadowOffset = CGSize.init(width: 0.4, height: 15.0)
        typePolicyGradientView.layer.shadowOpacity = 0.4
        typePolicyGradientView.layer.shadowRadius = 4.5
    }
    
}


extension AddPolicyViewController: AddPolicyDisplayLogic {
    func displayPolicyValidation(viewModel: AddPolicy.AddPolicyValid.ViewModel) {
        let isValid = viewModel.validationState == .valid(message: "")
        isValidPolicy = isValid
        
        switch viewModel.type {
        case .individual:
            newPolicyFloatingTextField.validate({ viewModel.validationState })
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
                self.policyInformationButton.alpha = isValid ? 0 : 1
            }
        case .collective:
            certificatePolicyFloatingTextField.validate({ viewModel.validationState })
            self.certificateInformationButton.isHidden = isValid ? true : false
        }
    }
    
    func displayCertificatePolicy(){
        self.newPolicyFloatingTextField.validate({ .valid(message: "") })
        self.displayColorToType(.collective)
        self.certificatePolicyFloatingTextField.focus()
    }
    
    func displayAddIndividualPolicy() {
        IALoader.shared.hide()
        self.showAlert(with: nil, message: LocalizableKeys.Profile.AddPolicy.Success.addingPolicy, actionTitle: LocalizableKeys.General.AlertOptions.accept) { (alertAction) in
            self.router?.routeToProfileViewController()
        }
    }
    
    func displayAddCollectivePolicy() {
        IALoader.shared.hide()
        self.showAlert(with: nil, message: LocalizableKeys.Profile.AddPolicy.Success.addingPolicy, actionTitle: LocalizableKeys.General.AlertOptions.accept) { (alertAction) in
            self.router?.routeToProfileViewController()
        }
    }
}


extension AddPolicyViewController: FloatingTextFieldDelegate {
    func textFieldShouldReturn(_ textField: FloatingTextField) {
        
    }
    
    func textFieldDidEndEditing(_ floatingTextField: FloatingTextField) {
        floatingTextField.isValidating = true
        
        if floatingTextField.text == "" {
            self.isValidPolicy = false
        }
        
        switch floatingTextField {
        case newPolicyFloatingTextField:
            if floatingTextField.text.isEmpty {
                floatingTextField.validate { .invalid(message: LocalizableKeys.Profile.AddPolicy.Error.emptyNewPolicy) }
                self.policyInformationButton.alpha = 1
                return
            }
            self.policyInformationButton.alpha = 0
            interactor?.validatePolicy(request: AddPolicy.AddPolicyValid.Request(policy: newPolicyFloatingTextField.text, certicate: certificatePolicyFloatingTextField.text, type: .individual))
        case certificatePolicyFloatingTextField:
            if floatingTextField.text.isEmpty {
                floatingTextField.validate { .invalid(message: LocalizableKeys.Profile.AddPolicy.Error.emptyCertificate) }
                self.certificateInformationButton.isHidden = false
                return
            }
            self.certificateInformationButton.isHidden = true
            isValidPolicy = true
            interactor?.validCertificate(certificate: certificatePolicyFloatingTextField.text)
            certificatePolicyFloatingTextField.validate({ () -> TextFieldValidationState in
                return .valid(message: "")
            })
        default:
            break
        }
    }
    
    func textFieldDidBeginEditing(_ floatingTextField: FloatingTextField) {
        if floatingTextField == newPolicyFloatingTextField {
            self.displayColorToType(.individual)
            self.certificatePolicyFloatingTextField.text = ""
        }
    }
}
