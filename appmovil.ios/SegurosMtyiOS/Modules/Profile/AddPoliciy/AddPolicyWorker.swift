//
//  AddPolicyWorker.swift
//  SegurosMtyiOS
//
//  Created by Israel Gutiérrez Castillo on 17/01/18.
//  Copyright (c) 2018 IA Interactive. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import RxSwift

enum AddPolicyError: Error {
    case unsuccessfulAddPolicy(status: AddPolicyStatus)
}

enum VerifyPolicyError: Error {
    case unsuccessfulVerifyPolicy(status: VerifyPolicyStatus)
}

enum VerifyCollectiveError: Error {
    case notValidCertificate
}

class AddPolicyWorker {
    
    
    /**
     Realiza la peticion al servicio para agregar póliza
     - parameter policy
     */
    func addIndividualPolicy(policy: String) -> Observable<Bool> {
        return Observable.create { observable in
            let disposable = ServiceManager.addPolicy(newPolicy: policy, newCertificate: nil).subscribe({ event in
                switch event {
                case .next(let result):
                    observable.onNext(result)
                case .error(let error):
                       observable.onError(error)
                case .completed:
                    break
                }
            })
            
            return Disposables.create {
                disposable.dispose()
            }
        }
    }
    
    /**
     Realiza la peticion al servicio para agregar póliza
     - parameter policy
     - parameter certificate
     */
    func addCollectivePolicy(policy: String, certificate: String) -> Observable<Bool> {
        return Observable.create { observable in
            let disposable = ServiceManager.addPolicy(newPolicy: policy, newCertificate: certificate).subscribe({ event in
                switch event {
                case .next(let result):
                    observable.onNext(result)
                case .error(let error):
                    observable.onError(error)
                case .completed:
                    break
                }
            })
            
            return Disposables.create {
                disposable.dispose()
            }
        }
    }
}
