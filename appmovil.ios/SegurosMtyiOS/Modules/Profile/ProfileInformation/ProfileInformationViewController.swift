//
//  ProfileInformationViewController.swift
//  SegurosMtyiOS
//
//  Created by Israel Gutiérrez Castillo on 18/12/17.
//  Copyright (c) 2017 IA Interactive. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RxSwift
import Contacts

protocol ProfileInformationDisplayLogic: class {
    func displayEmergencyContacts(viewModel: ProfileInformation.GetEmergencyContacts.ViewModel)
    func dismissWelcomeView()
}

class ProfileInformationViewController: UIViewController, ExpiredSessionDisplayLogic, ErrorDisplayLogic {
    
    var interactor: ProfileInformationBusinessLogic?
    var router: (NSObjectProtocol & ProfileInformationRoutingLogic & ProfileInformationDataPassing)?
    
    @IBOutlet weak var birthDateLabel: UILabel!
    @IBOutlet weak var emailLabel: UILabel!
    @IBOutlet weak var collectionContacts: UICollectionView!
    @IBOutlet weak var containerCollectionViewEmergencyContacts: UIView!
    @IBOutlet weak var NoInternetView: UIView!
    @IBOutlet weak var errorMessage: UILabel!
    @IBOutlet weak var retry: IAGradientButton!
    @IBOutlet weak var activityIndicatorEmergencyContacts: UIActivityIndicatorView!
    
    @IBOutlet weak var TopStackMail: NSLayoutConstraint!
    @IBOutlet weak var topSeparator: NSLayoutConstraint!
    @IBOutlet weak var topTitlle: NSLayoutConstraint!
    
    @IBOutlet weak var heightCollection: NSLayoutConstraint!
    @IBOutlet weak var topContainerCollection: NSLayoutConstraint!
    
    
    let cellIdentifier = "emergencyContactCollectionViewCell"
    
    var emergencyContacts: [EmergencyContact]? {
        didSet {
            self.collectionContacts.reloadData()
        }
    }
    
    var disposableBag: DisposeBag = DisposeBag()
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = ProfileInformationInteractor()
        let presenter = ProfileInformationPresenter()
        let router = ProfileInformationRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    //For this especific case we don't need it

    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.activityIndicatorEmergencyContacts.color = UIColor.gray
        self.collectionContacts.delegate = self
        self.collectionContacts.dataSource = self
        setupCollectionView()
        getEmergencyContacts()
        updateConstrainsIphonePlus()
    }
    
    private func setupCollectionView() {
        let alignedLayout = IACollectionAlignedLayout(alignmentType: .Center, delegate: self)
        self.collectionContacts?.collectionViewLayout = alignedLayout
    }
    
    private func getEmergencyContacts() {
        interactor?.getEmergencyContacts()
    }
    
    // MARK: Do something
    @IBAction func retryPressed(_ sender: Any) {
       reloadEmergencyContacts()
    }
    
    func reloadEmergencyContacts() {
        self.activityIndicatorEmergencyContacts.startAnimating()
        self.containerCollectionViewEmergencyContacts.isHidden = true
        self.NoInternetView.isHidden = true
        self.retry.isHidden = true
        getEmergencyContacts()
    }
    
    private func requestAccessContacts() {
        RequestResourcesManager.isAuthorizedToAccessContacts().subscribe { (event) in
            switch event {
            case .next(let isAuthorized):
                self.showActionSheetToAddEmergencyContact(isAuthorizedContacts: isAuthorized)
            case .error(_):
                let alert = IABlurAlertController(title: nil, message: LocalizableKeys.General.openSettingsContacts, preferredStyle: .alert)
                
                alert.addAction(UIAlertAction(title: LocalizableKeys.General.AlertOptions.cancel, style: .default, handler: { (action) in
                    self.showActionSheetToAddEmergencyContact(isAuthorizedContacts: false)
                }))
                
                alert.addAction(UIAlertAction(title: LocalizableKeys.General.AlertOptions.configuration, style: .default, handler: { (action) in
                    if let appSettings = URL(string: UIApplicationOpenSettingsURLString) {
                        UIApplication.shared.open(appSettings, options: [:], completionHandler: { (completion) in
                            alert.dismiss(animated: true, completion: nil)
                        })
                    }
                }))
                
                self.present(alert, animated: true, completion: nil)
                return
            default:
                break
            }
        }.disposed(by: self.disposableBag)
    }
    
    private func showActionSheetToAddEmergencyContact(isAuthorizedContacts: Bool) {
        let actionSheet = UIAlertController(title: nil, message: nil, preferredStyle: .actionSheet)
        
        if isAuthorizedContacts {
            let addSelectionEmergencyContactAction = UIAlertAction(title: "Seleccionar contacto", style: .default, handler: { [unowned self] _ in
                self.router?.goToAddSelectionEmergencyContact()
            })
            actionSheet.addAction(addSelectionEmergencyContactAction)
        }
        
        let addManualEmergencyContactAction = UIAlertAction(title: "Agregar manualmente", style: .default, handler: { [unowned self] _ in
            self.router?.goToAddManualEmergencyContact()
        })
        actionSheet.addAction(addManualEmergencyContactAction)
        
        let cancelAction = UIAlertAction(title: "Cancelar", style: .cancel, handler: nil)
        actionSheet.addAction(cancelAction)
        
        present(actionSheet, animated: true, completion: nil)
    }
    
    func updateUserInfo(with birthDate: String, email: String) {
        birthDateLabel.text = birthDate.shortDateFormat().shortMonthDate()
        emailLabel.text = email
    }
    
    private func updateConstrainsIphonePlus() {
        if !DeviceDetector.DeviceType.IS_IPHONE_5 {
            self.TopStackMail.constant = 35
            self.topSeparator.constant = 40
            self.heightCollection.constant = 175
            self.topContainerCollection.constant = 40
            if DeviceDetector.DeviceType.IS_IPHONE_X {
                self.topContainerCollection.constant = 50
                self.topSeparator.constant = 70
            }
        }
    }
}

/**
 Extensión para ejecutar los métodos que llama el presenter
 */
extension ProfileInformationViewController: ProfileInformationDisplayLogic {
    func displayEmergencyContacts(viewModel: ProfileInformation.GetEmergencyContacts.ViewModel) {
        self.activityIndicatorEmergencyContacts.stopAnimating()
        
        if let message = viewModel.errorMessage {
            self.containerCollectionViewEmergencyContacts.isHidden = true
            self.NoInternetView.isHidden = false
            self.retry.isHidden = false
            self.errorMessage.text = message
        } else {
            if let contacts = viewModel.emergencyContacts {
                self.emergencyContacts = contacts
                self.containerCollectionViewEmergencyContacts.isHidden = false
            } else {
                self.containerCollectionViewEmergencyContacts.isHidden = false
                self.collectionContacts.reloadData() //No hay contactos de emergencia (recargar tabla para agregar la celda de añadir contacto)
            }
        }
    }
    
    func dismissWelcomeView() {
        if let profileVC = self.parent as? ProfileViewController {
            profileVC.hideWelcome()
        }
    }
}

/**
 Extension donde se trabaja con el collectionView de contactos de emergencia
 */
extension ProfileInformationViewController: UICollectionViewDelegate, UICollectionViewDataSource {
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        return 1
    }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        if let _ = self.emergencyContacts {
            return 2
        }
        
        return 1
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cellDefault = collectionView.dequeueReusableCell(withReuseIdentifier: cellIdentifier, for: indexPath)
        guard let cell = cellDefault as? EmergencyContactCollectionViewCell else { return cellDefault }
        
        if let contacts = self.emergencyContacts {
            if indexPath.row == 0 && self.emergencyContacts?.count == 1 {
                cell.configureCell(emergencyContact: nil)
            } else {
              cell.configureCell(emergencyContact: contacts[(contacts.count == 1 ? 0 : indexPath.row)])
            }
        } else {
            cell.configureCell(emergencyContact: nil)
        }
        
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        if let contacts = self.emergencyContacts {
            if (indexPath.row == 0 && contacts.count == 1) {
                requestAccessContacts()
            } else {
                let request = ProfileInformation.SetEmergencyContact.Request(emergencyContact: self.emergencyContacts?[(self.emergencyContacts?.count == 1 ? 0 : indexPath.row)])
                interactor?.setEmergencyContact(request: request)
                self.router?.goToDetailEmegerncyContact()
            }
        } else {
          requestAccessContacts()
        }
    }
}

/**
 Extension donde se ajusta el layout del collectionView
 */
extension ProfileInformationViewController: IACollectionAlignedLayoutDelegate {
    
    func alignedItemWidth(layout: IACollectionAlignedLayout, atIndex index: Int) -> CGFloat {
        return 110.0
    }
    
    func alignedItemFixedHeight(layout: IACollectionAlignedLayout) -> CGFloat {
        return 110.0
    }
}
