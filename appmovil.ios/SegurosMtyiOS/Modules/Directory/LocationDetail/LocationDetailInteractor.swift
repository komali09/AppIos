//
//  LocationDetailInteractor.swift
//  SegurosMtyiOS
//
//  Created by Isidro Adan Garcia Solorio  on 1/2/18.
//  Copyright (c) 2018 IA Interactive. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
import RxSwift
import MapKit

protocol LocationDetailBusinessLogic {
    func loadLocationData()
    func openInstructions()
    func toogleFavorite()
    func getBenefits()
}

protocol LocationDetailDataStore {
    var location: Location? { get set }
    var needsUpdate: Bool { get set }
    
}

class LocationDetailInteractor: LocationDetailBusinessLogic, LocationDetailDataStore {
    
    var presenter: (LocationDetailPresentationLogic & ErrorPresentationLogic & ExpiredSessionPresentationLogic)?
    var worker: DirectoryWorker?
    
    // MARK: DataStore
    var disposableBag: DisposeBag = DisposeBag()
    var location: Location?
    var needsUpdate: Bool = false
    
    // MARK: Do something
    
    func loadLocationData() {
        if worker == nil {
            worker = DirectoryWorker()
        }
        
        if let businessId = self.location?.businessId,
            let providerId = self.location?.providerId {
            
            worker?.getLocationDetail(businessId: businessId, providerId: providerId).subscribe({ event in
                switch event {
                case .next(let result):
                    self.prepareToPresentLocation(with: result)
                case .error(let error):
                    if let location = self.location {
                        let response = LocationDetail.LoadDetail.Response(location:location)
                        self.presenter?.presentBasicLocationData(response: response)
                    }
                    switch error {
                    case NetworkingError.unauthorized:
                        self.presenter?.presentExpiredSession()
                    default:
                        self.presenter?.presentOnScreenError(error)
                     }
                default:
                    break
                }
            }).disposed(by: self.disposableBag)
        }
    }
    
    func openInstructions() {
        guard let coordinate = self.location?.coordinates else { return }
        guard let name = self.location?.name else { return }
        let alertControlError = UIAlertController.init(title: LocalizableKeys.General.AlertOptions.error, message: LocalizableKeys.Directory.Map.noNavigationAppsError, preferredStyle: .actionSheet)
        let cancelAction = UIAlertAction.init(title: LocalizableKeys.General.AlertOptions.cancel, style: .cancel, handler: nil)
        alertControlError.addAction(cancelAction)
        
        let viewModel = worker?.getAllPossibleNavigationApps(name, coordinates: coordinate) ?? LocationDetail.ShowNavigationApps.ViewModel(alertController: alertControlError, maps: nil)
        
        self.presenter?.presentNavigationAppsAlertController(modelView: viewModel)
    }
    
    func toogleFavorite() {
        if worker == nil {
            worker = DirectoryWorker()
        }
        
        worker?.toogleLocationFavorite(location: self.location).subscribe({ event in
            switch event {
            case .next(let result):
                self.needsUpdate = true
                self.prepareToPresentLocation(with: result)
            case .error(let error):
                switch error {
                case NetworkingError.unauthorized:
                    self.presenter?.presentExpiredSession()
                default:
                    self.presenter?.presentError(error)
                }
            default:
                break
            }
        }).disposed(by: self.disposableBag)
    }
    
    func prepareToPresentLocation(with location: Location) {
        self.location = location
        let response = LocationDetail.LoadDetail.Response(location: location)
        self.presenter?.presentLocationData(response: response)
    }
    
    func getBenefits() {
        if worker == nil {
            worker = DirectoryWorker()
        }

          if let providerId = self.location?.providerId {
            worker?.getBenefits(providerId: providerId).subscribe({ event in
                switch event {
                case .next(let result):
                    self.presenter?.presentGetBenefits(response: BenefitServiceDetail.BenefitServices.Response(benefits: result))
                case .error(let error):
                    switch error {
                    case NetworkingError.unauthorized:
                        self.presenter?.presentExpiredSession()
                    default:
                        self.presenter?.presentOnScreenErrorBenefit(error)
                    }
                default:
                    break
                }
            }).disposed(by: self.disposableBag)
        }
    }
}
