//
//  LocationDetailViewController.swift
//  SegurosMtyiOS
//
//  Created by Isidro Adan Garcia Solorio  on 1/2/18.
//  Copyright (c) 2018 IA Interactive. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import GoogleMaps
import MapKit

protocol LocationDetailDisplayLogic: class {
    func displayLocationData(viewModel: LocationDetail.LoadDetail.ViewModel)
    func displayBasicLocationData(viewModel: LocationDetail.LoadDetail.ViewModel)
    func displayOnscreenError(type: IAErrorAlertType)
    func displayOnscreenErrorBenefit(type: IAErrorAlertType)
    func displayBenefits(viewModel: BenefitServiceDetail.BenefitServices.ViewModel)
    func displayAlertNavigationApps(viewModel: LocationDetail.ShowNavigationApps.ViewModel)
    func displayMaps(viewModel: LocationDetail.ShowNavigationApps.ViewModel)
}

class LocationDetailViewController: UIViewController, ErrorDisplayLogic, ExpiredSessionDisplayLogic {
    var interactor: LocationDetailBusinessLogic?
    var router: (NSObjectProtocol & LocationDetailRoutingLogic & LocationDetailDataPassing)?
    
    @IBOutlet weak var locationTypeLabel: UILabel!
    @IBOutlet weak var locationTitle: UILabel!
    @IBOutlet weak var locationState: UILabel!
    @IBOutlet weak var locationName: UILabel!
    @IBOutlet weak var locationFavButton: UIButton!
    @IBOutlet weak var backgroundImage: UIImageView!
    @IBOutlet weak var backgroundView: UIView!
    @IBOutlet weak var segmentedControl: UISegmentedControl?
    @IBOutlet weak var infoLabel: UILabel?
    @IBOutlet weak var container: UIView!
    
    @IBOutlet weak var newHeight: NSLayoutConstraint!
    
    var benefitHeight: CGFloat?
    

    var currentViewController: UIViewController?
    lazy var info: LocationDetailInfoViewController? = {
        let vc = self.storyboard?.instantiateViewController(withIdentifier: "info") as? LocationDetailInfoViewController
        vc?.interactor = self.interactor
        vc?.delegate = self
        return vc
    }()
    
    lazy var benefits: LocationDetailBenefitsViewController? = {
        let vc = self.storyboard?.instantiateViewController(withIdentifier: "benefits") as? LocationDetailBenefitsViewController
        vc?.interactor = self.interactor
        vc?.delegate = self
        return vc
    }()
   
    
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = LocationDetailInteractor()
        let presenter = LocationDetailPresenter()
        let router = LocationDetailRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        loadData()
    }
    
    // MARK: Do something
    
    func loadData() {
        segmentedControl?.sendActions(for: .valueChanged)
        IALoader.shared.show(LocalizableKeys.Loader.detailLocation)
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.3) {
            self.interactor?.loadLocationData()
        }
        
    }
   
    @IBAction func closePressed(_ sender: Any) {
        if router?.dataStore?.needsUpdate ?? false {
            guard let tabBarController = self.presentingViewController as? UITabBarController else { return }
            guard let navigationController = tabBarController.selectedViewController as? UINavigationController else { return }
            guard let viewController = navigationController.viewControllers.first as? DirectoryViewController else { return }
            
            viewController.getLocations()
        }
        
        self.dismiss(animated: true, completion: nil)
    }
    
    @IBAction func favButtonPressed(_ sender: Any) {
        IALoader.shared.show(LocalizableKeys.Loader.setLocationFavorite)
        self.interactor?.toogleFavorite()
    }
}

// MARK: - LocationDetailDisplayLogic
extension LocationDetailViewController : LocationDetailDisplayLogic {
    func displayLocationData(viewModel: LocationDetail.LoadDetail.ViewModel) {
        self.displayHeaderData(viewModel: viewModel)
        self.info?.displayLocationData(viewModel: viewModel)
    }
    
    func displayBasicLocationData(viewModel: LocationDetail.LoadDetail.ViewModel) {
        self.displayHeaderData(viewModel: viewModel)
        self.info?.displayBasicLocationData(viewModel: viewModel)
    }
    
    func displayHeaderData(viewModel: LocationDetail.LoadDetail.ViewModel) {
        IALoader.shared.hide()
        self.locationTypeLabel.text = viewModel.type
        self.locationTitle.text = viewModel.title
        self.locationName.text = viewModel.title
        self.locationState.text = viewModel.city
        self.locationFavButton.isSelected = viewModel.isFavorite
        self.backgroundImage.image = viewModel.bgImage
        if viewModel.isBenefitsHidden {
            self.segmentedControl?.removeFromSuperview()
            self.infoLabel?.isHidden = false
        } else {
            self.infoLabel?.removeFromSuperview()
        }
    }
    
    func displayOnscreenError(type: IAErrorAlertType) {
        IALoader.shared.hide()
        self.info?.displayOnscreenError(type: type)
    }
    
    func displayOnscreenErrorBenefit(type: IAErrorAlertType) {
        IALoader.shared.hide()
        self.benefits?.displayOnscreenError(type: type)
    }
    
    func displayBenefits(viewModel: BenefitServiceDetail.BenefitServices.ViewModel){
        self.benefits?.displayBenefits(arrayBenefit: viewModel.benefits)
    }
}

// MARK: - UIScrollViewDelegate
extension LocationDetailViewController: UIScrollViewDelegate {
    func scrollViewDidScroll(_ scrollView: UIScrollView) {
        let yTransform = scrollView.contentOffset.y * 0.4
        self.backgroundImage.transform = CGAffineTransform.identity.translatedBy(x: 0, y: -yTransform)
        self.locationTypeLabel.transform = CGAffineTransform.identity.translatedBy(x: 0, y: yTransform)
        self.locationTitle.transform = CGAffineTransform.identity.translatedBy(x: 0, y: yTransform)
        self.locationState.transform = CGAffineTransform.identity.translatedBy(x: 0, y: yTransform)
        if scrollView.contentOffset.y < -1 {
            self.backgroundView.transform = CGAffineTransform.identity.scaledBy(x: 1, y: scrollView.contentOffset.y)
        }
    }
}

//MARK: - SegmentedControl Value Changed
extension LocationDetailViewController {
    
    @IBAction fileprivate func makeTransitionToContainer(_ sender: UISegmentedControl) {
        UIView.animate(withDuration: 0.1, animations: {
            self.container.alpha = 0.0
            self.container.transform = CGAffineTransform.identity.translatedBy(x: 0, y: -5)
        }) { (completed) in
            self.currentViewController?.view.removeFromSuperview()
            self.currentViewController?.removeFromParentViewController()
            
            self.displayCurrentTab(sender.selectedSegmentIndex)
            self.container.transform = CGAffineTransform.identity.translatedBy(x: 0, y: 5)
            UIView.animate(withDuration: 0.2) {
                self.container.alpha = 1.0
                self.container.transform = CGAffineTransform.identity.translatedBy(x: 0, y: 0)
            }
        }
    }
    
    func displayCurrentTab(_ tabIndex: Int){
        if let vc = viewControllerForSelectedSegmentIndex(tabIndex) {
            
            self.addChildViewController(vc)
            vc.didMove(toParentViewController: self)
            
            vc.view.frame = self.container.bounds
            self.container.addSubview(vc.view)
            self.currentViewController = vc
        }
    }
    
    func viewControllerForSelectedSegmentIndex(_ index: Int) -> UIViewController? {
        switch index {
        case 0:
            return info
        case 1:
             return benefits
        default:
            return nil
        }
    }
    
    func displayAlertNavigationApps(viewModel: LocationDetail.ShowNavigationApps.ViewModel){
        self.present(viewModel.alertController!, animated: true, completion: nil)
    }
    
    func displayMaps(viewModel: LocationDetail.ShowNavigationApps.ViewModel) {
        viewModel.maps!.openInMaps(launchOptions: [MKLaunchOptionsDirectionsModeKey : MKLaunchOptionsDirectionsModeDriving])
    }
}

extension LocationDetailViewController: LocationDetailBenefitsViewControllerDelegate {
    func didUpdateContentSize(viewController: UIViewController, contentSize: CGSize) {
        benefitHeight = contentSize.height
        self.newHeight.constant = benefitHeight!
        if benefitHeight! == 100 {
            self.newHeight.constant = 300
        }
        self.view.updateConstraints()
        self.view.layoutSubviews()

    }
}
