//
//  LocationDetailPresenter.swift
//  SegurosMtyiOS
//
//  Created by Isidro Adan Garcia Solorio  on 1/2/18.
//  Copyright (c) 2018 IA Interactive. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import GoogleMaps

protocol LocationDetailPresentationLogic {
    func presentLocationData(response: LocationDetail.LoadDetail.Response)
    func presentBasicLocationData(response: LocationDetail.LoadDetail.Response)
    func presentOnScreenError(_ error:Error)
    func presentOnScreenErrorBenefit(_ error:Error)
    func presentGetBenefits(response: BenefitServiceDetail.BenefitServices.Response)
    func presentNavigationAppsAlertController(modelView: LocationDetail.ShowNavigationApps.ViewModel)
}

class LocationDetailPresenter: LocationDetailPresentationLogic {
    weak var viewController: (LocationDetailDisplayLogic & ErrorDisplayLogic & ExpiredSessionDisplayLogic)?
    
    // MARK: Do something
    
    func presentLocationData(response: LocationDetail.LoadDetail.Response) {
        let viewModel = getLocationViewModel(with: response.location)
        viewController?.displayLocationData(viewModel: viewModel)
    }
    
    func presentBasicLocationData(response: LocationDetail.LoadDetail.Response) {
        let viewModel = getLocationViewModel(with: response.location)
        viewController?.displayBasicLocationData(viewModel: viewModel)
    }
    
    func presentOnScreenError(_ error:Error) {
        switch error {
        case NetworkingError.noInternet:
            viewController?.displayOnscreenError(type: .noInternet)
        default:
            viewController?.displayOnscreenError(type: .noSearchResults)
        }
    }
    
    func presentOnScreenErrorBenefit(_ error:Error) {
        switch error {
        case NetworkingError.noInternet:
            viewController?.displayOnscreenErrorBenefit(type: .noInternet)
        case NetworkingError.noSuccessStatusCode(let code, _):
            if code == 1{
                viewController?.displayOnscreenErrorBenefit(type: .noLocationsResults)
            } else {
              viewController?.displayOnscreenErrorBenefit(type: .noSearchResults)
        }
        default:
            viewController?.displayOnscreenErrorBenefit(type: .noSearchResults)
        }
    }
    
    private func getLocationViewModel(with location:Location) -> LocationDetail.LoadDetail.ViewModel {
        let title = location.name.capitalized
        
        var city = ""
        if let cityName = location.city {
            city = cityName.uppercased()
        }
        
        let type = location.type.name.uppercased()
        let isFavorite = location.isFavorite
        let address = location.address?.capitalized ?? LocalizableKeys.General.noInformation
        let phone = location.phone.replacingOccurrences(of: "-", with: " ")
        let website:String? = location.website
        
        var policyList: String? = nil
        if let list = location.policyList, list.count > 0 {
            policyList = list.joined(separator: " â€¢ ")
        }
        let isPolicyHidden = !(location.type == .hospital && policyList != nil)
        
        let policyMessage = location.policyMessage
        
        let bgImage = self.getBackgroundImage(from: location.type)
        
        var marker:GMSMarker?
        
        if let coordinates = location.coordinates {
            marker = GMSMarker(position: coordinates)
            marker?.appearAnimation = .pop
        }
        
        
        return LocationDetail.LoadDetail.ViewModel(title: title,
                                                            city: city,
                                                            type: type,
                                                            isFavorite: isFavorite!,
                                                            bgImage: bgImage!,
                                                            address: address,
                                                            phone: phone,
                                                            website: website,
                                                            marker: marker,
                                                            isPolicyHidden: isPolicyHidden,
                                                            policyList: policyList,
                                                            policyMessage: policyMessage,
                                                            isBenefitsHidden: isPolicyHidden)
    }
    
    
    private func getBackgroundImage(from type:ServiceType) -> UIImage? {
        var image = ""
        switch type {
        case .nursing:
            image = "enfermeriaImg"
        case .pharmacy:
            image = "farmaciaImg"
        case .hospital:
            image = "hospitalImg"
        case .laboratory:
            image = "laboratorioImg"
        case .medic:
            image = "medicoImg"
        case .optics:
            image = "opticaImg"
        case .rehabilitation:
            image = "rehabilitacionImg"
        default:
            image = "otrosImg"
        }
        return UIImage(named: image)
    }
    
    func presentGetBenefits(response: BenefitServiceDetail.BenefitServices.Response) {
        viewController?.displayBenefits(viewModel: BenefitServiceDetail.BenefitServices.ViewModel(benefits: response.benefits ))
    }
    
    func presentNavigationAppsAlertController(modelView: LocationDetail.ShowNavigationApps.ViewModel){
        if modelView.alertController != nil {
            viewController?.displayAlertNavigationApps(viewModel: modelView)
        } else  if modelView.maps != nil {
            viewController?.displayMaps(viewModel: modelView)
        }
    }
    
}

extension LocationDetailPresenter : ErrorPresentationLogic {
    func presentError(_ error:Error) {
        var message = ""
        switch error {
        case NetworkingError.noInternet:
            message = LocalizableKeys.General.noInternet
        default:
            message = LocalizableKeys.General.serviceError
        }
        
        self.viewController?.displayError(with: message)
    }
}

extension LocationDetailPresenter : ExpiredSessionPresentationLogic {
    func presentExpiredSession() {
        self.viewController?.displayExpiredSession()
    }
}

