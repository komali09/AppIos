//
//  LocationsTableInteractor.swift
//  SegurosMtyiOS
//
//  Created by Erwin Jonnatan Perez TÃ©llez on 15/12/17.
//  Copyright (c) 2017 IA Interactive. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
import RxSwift

protocol LocationsTableBusinessLogic {
    func displayError(ofType type: IAErrorAlertType)
    func toogleFavorite(at indexPath: IndexPath)
}


class LocationsTableInteractor: LocationsTableBusinessLogic, DirectoryDataStore {
    var presenter: (LocationsTablePresentationLogic & ErrorPresentationLogic & ExpiredSessionPresentationLogic)?
    var disposableBag = DisposeBag()
    // MARK: DataStore
    var locations: [Location] = [] {
        didSet {
            self.updateLocations()
        }
    }
    var isPlanIncludedOnly: Bool = true
    
    func updateLocations() {
        let response = LocationsTable.Locations.Response(locations: locations)
        self.presenter?.presentUpdatedLocations(response: response)
    }
    
    func displayError(ofType type: IAErrorAlertType) {
        self.presenter?.presentErrorMessage(ofType: type)
    }
    
    func toogleFavorite(at indexPath: IndexPath) {
        
        let worker = DirectoryWorker()
        
        let location = locations[indexPath.row]
        
        worker.toogleLocationFavorite(location: location).subscribe({ event in
            switch event {
            case .next(let result):
                self.locations[indexPath.row] = result
                self.presenter?.presentFavorite(response: indexPath)
            case .error(let error):
                switch error {
                case NetworkingError.unauthorized:
                    self.presenter?.presentExpiredSession()
                default:
                    self.presenter?.presentError(error)
                }
            default:
                break
            }
        }).disposed(by: self.disposableBag)
    }
    
}
