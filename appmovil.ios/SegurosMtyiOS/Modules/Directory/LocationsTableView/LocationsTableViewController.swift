//
//  LocationsTableViewController.swift
//  SegurosMtyiOS
//
//  Created by Erwin Jonnatan Perez Téllez on 15/12/17.
//  Copyright (c) 2017 IA Interactive. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LocationsTableDisplayLogic: class {
    func displayUpdatedLocations(viewModel: [LocationsTable.Locations.ViewModel])
    func displayFavorite(viewModel: IndexPath)
}

/*
 Clase que se encarga de la tabla de ubicaciones cercanas a tu ubicación
 */
class LocationsTableViewController: UIViewController, ErrorDisplayLogic, ExpiredSessionDisplayLogic {
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var errorView:IAErrorView!
    
    var interactor: LocationsTableBusinessLogic?
    var router: (NSObjectProtocol & DirectoryChildRoutingLogic & DirectoryChildDataPassing)?
    
    let cellIdentifier = "locationTableViewCell"
    
    var viewModel: [LocationsTable.Locations.ViewModel] = []
    weak var delegate:DirectoryViewControllerDelegate?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = LocationsTableInteractor()
        let presenter = LocationsTablePresenter()
        let router = DirectoryChildRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.tableView.estimatedRowHeight = 116.0
        self.tableView.rowHeight = UITableViewAutomaticDimension
    }
}

// MARK: - LocationsTableDisplayLogic
extension LocationsTableViewController : LocationsTableDisplayLogic{
    func displayUpdatedLocations(viewModel: [LocationsTable.Locations.ViewModel]) {
        self.viewModel = viewModel
        self.tableView.reloadData()
        self.errorView.hide()
        self.tableView.isHidden = false
    }
    
    func displayFavorite(viewModel: IndexPath){
        IALoader.shared.hide()
        self.tableView.reloadRows(at: [viewModel], with: .automatic)
        self.errorView.hide()
        self.tableView.isHidden = false
    }
}

//MARK: DirectoryErrorDisplayLogic
extension LocationsTableViewController: DirectoryErrorDisplayLogic {
    func displayError(ofType type: IAErrorAlertType) {
        self.viewModel = []
        self.tableView.reloadData()
        self.tableView.isHidden = true
        switch type {
        case .noInternet:
            errorView.show(type: .noInternet, message: LocalizableKeys.Directory.List.noInternet, actionMessage: LocalizableKeys.General.AlertOptions.reintentar) {
                self.delegate?.reloadData()
            }
        case .noLocationsResults:
            errorView.show(type: .noLocationsResults, message: LocalizableKeys.Directory.List.noLocations, actionMessage: "Filtrar") {
                self.router?.routeToFilter()
            }
        case .noFavoritesResults:
            errorView.show(type: .noSearchResults, message: LocalizableKeys.Directory.List.noFavoritesResults, actionMessage: "Filtrar") {
                self.router?.routeToFilter()
            }
        case .noSearchResults:
            errorView.show(type: .noSearchResults, message: LocalizableKeys.Directory.List.noSearchResults)
        default:
            errorView.show(type: .noInternet, message: LocalizableKeys.Directory.List.genericError, actionMessage: LocalizableKeys.General.AlertOptions.reintentar) {
                self.delegate?.reloadData()
            }
        }
    }
}

// MARK: - UITableViewController delegate
/*
 Protocolo para definir el número de secciones y filas den la tabla
 */
extension LocationsTableViewController : UITableViewDelegate, UITableViewDataSource{
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return viewModel.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cellDefault = tableView.dequeueReusableCell(withIdentifier: cellIdentifier, for: indexPath)
        guard let cell = cellDefault as? LocationTableViewCell else { return cellDefault }
        let item = viewModel[indexPath.row]
        
        if (indexPath.row % 2) == 0 {
            cell.backgroundColor = UIColor.white
        } else {
            cell.backgroundColor = UIColor.smLightGray
        }
        
        cell.name.text = item.name
        cell.address.text = item.address
        cell.phone.text = item.phone
        cell.isFavorite = item.isFavorite
        cell.imageName = item.image
        
        if let distanceString = item.distanceString {
            cell.distance.isHidden = false
            cell.distance.text = distanceString
        } else {
            cell.distance.isHidden = true
        }
        
        cell.selectionStyle = .none
        cell.delegate = self
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        if let item = self.router?.dataStore?.locations[indexPath.row] {
            self.router?.routeToLocationDetail(item)
        }
    }
}

extension LocationsTableViewController: LocationTableViewCellDelegate {
    func favoriteButtonPressed(cell: LocationTableViewCell) {
        guard let indexPath = self.tableView.indexPath(for: cell) else { return }
        IALoader.shared.show(LocalizableKeys.Loader.setLocationFavorite)
        self.interactor?.toogleFavorite(at: indexPath)
    }
}
