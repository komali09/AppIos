//
//  DirectoryMapViewController.swift
//  SegurosMtyiOS
//
//  Created by Isidro Adan Garcia Solorio  on 12/14/17.
//  Copyright (c) 2017 IA Interactive. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import GoogleMaps

protocol DirectoryMapDisplayLogic: class {
    func displayUpdatedLocations(viewModel:DirectoryMap.Locations.ViewModel)
    func displayMapLocation(_ bounds:GMSCoordinateBounds)
}

protocol DirectoryViewControllerDelegate: class {
    func reloadData()
}

class DirectoryMapViewController: UIViewController {
    var interactor: DirectoryMapBusinessLogic?
    var router: (NSObjectProtocol & DirectoryChildRoutingLogic & DirectoryChildDataPassing)?
    
    @IBOutlet weak var mapView: GMSMapView!
    @IBOutlet weak var bannerAlert: IABannerAlert!
    
    weak var delegate:DirectoryViewControllerDelegate?
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = DirectoryMapInteractor()
        let presenter = DirectoryMapPresenter()
        let router = DirectoryChildRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    func setupMap() {
        self.mapView.delegate = self
        self.mapView.isMyLocationEnabled = true
        self.mapView.settings.compassButton = true
        self.mapView.settings.myLocationButton = true
    }
    
    // configuracion del mapa
    func setupMapLocation(_ location:CLLocation) {
        let camera = GMSCameraPosition.camera(withLatitude: location.coordinate.latitude,
                                              longitude: location.coordinate.longitude,
                                              zoom: 14)
        
        self.mapView.camera = camera
    }
    
    func displayMapLocation(_ bounds:GMSCoordinateBounds) {
        guard let camera = mapView.camera(for: bounds, insets: UIEdgeInsets(top: 10, left: 10, bottom: 10, right: 10)) else { return }
        DispatchQueue.main.async {
            self.mapView.camera = camera
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.setupMap()
        
        if let location = LocationManager.shared.location {
            setupMapLocation(location)
        } 
    }
}

//MARK: - DirectoryMapDisplayLogic
extension DirectoryMapViewController: DirectoryMapDisplayLogic {
    func displayUpdatedLocations(viewModel: DirectoryMap.Locations.ViewModel) {
        IALoader.shared.hide()
        self.mapView.clear()
        for item in viewModel.markers {
            item.map = self.mapView
        }
        
    }
}

//MARK: DirectoryErrorDisplayLogic
extension DirectoryMapViewController: DirectoryErrorDisplayLogic {
    func displayError(ofType type: IAErrorAlertType) {
        switch type {
        case .noInternet:
            bannerAlert.show(type: type, message: LocalizableKeys.Directory.Map.noInternet, actionMessage: "Toca para reintentar") {
                self.delegate?.reloadData()
            }
        case .noFavoritesResults:
            self.mapView.clear()
            bannerAlert.show(type: .noSearchResults, message: LocalizableKeys.Directory.Map.noFavoritesResults)
        case .noLocationsResults:
            self.mapView.clear()
            bannerAlert.show(type: type, message: LocalizableKeys.Directory.Map.noLocations)
        case .noSearchResults:
            self.mapView.clear()
            bannerAlert.show(type: type, message: LocalizableKeys.Directory.Map.noSearchResults)
        default:
            bannerAlert.show(type: .noInternet, message: LocalizableKeys.Directory.Map.genericError, actionMessage: "Toca para reintentar") {
                self.delegate?.reloadData()
            }
        }
    }
}

//MARK: - GMSMapViewDelegate
extension DirectoryMapViewController : GMSMapViewDelegate {
    func mapView(_ mapView: GMSMapView, didTap marker: GMSMarker) -> Bool {
        if let userData = marker.userData as? Location {
            debugPrint("marked Tapped: \(userData.type.rawValue)")
            self.router?.routeToLocationDetail(userData)
        }
        return true
    }
    
    func mapView(_ mapView: GMSMapView, willMove gesture: Bool) {
        if let parent = self.parent as? DirectoryViewController {
            parent.navigationController?.view.endEditing(true)
            parent.suggestionsView.isHidden = true
        }
    }
}
