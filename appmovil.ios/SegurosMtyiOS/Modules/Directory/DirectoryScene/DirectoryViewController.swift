//
//  DirectoryViewController.swift
//  SegurosMtyiOS
//
//  Created by Erwin Perez Tellez on 05/12/17.
//  Copyright (c) 2017 Erwin Jonnatan Perez TÃ©llez. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DirectoryErrorDisplayLogic: class {
    func displayError(ofType type:IAErrorAlertType)
}

protocol DirectoryDisplayLogic: class {
    func displayLocations()
    func displaySearchSuggestion(_ suggestions: [String])
    func displayLocationPermissionMessage()
    func displayStateList()
}

enum DirectoryViews {
    case map
    case list
}

class DirectoryViewController: UIViewController, ExpiredSessionDisplayLogic {
    @IBOutlet weak var containerView: UIView!
    @IBOutlet weak var searchView: UIView!
    @IBOutlet weak var validationImage: UIImageView!
    @IBOutlet weak var toogleViewButton: UIBarButtonItem!
    @IBOutlet weak var searchTextField: UITextField!
    @IBOutlet weak var suggestionsView: UITableView!
    
    private let ContentSizeName = "contentSize"
    var maxSuggestionsHeight: CGFloat = 0.0
    var interactor: DirectoryBusinessLogic?
    var router: (NSObjectProtocol & DirectoryRoutingLogic & DirectoryDataPassing)?
    var directoryViews:DirectoryViews = .map
    var ildeTimer:Timer?
    var ildeEmptyTimer:Timer?
    var suggestions:[String] = []
    
    lazy var mapViewController:DirectoryMapViewController = {
        let storyboard = UIStoryboard.directory()
        let viewController = storyboard.instantiateViewController(withIdentifier: "DirectoryMapViewController") as! DirectoryMapViewController
        viewController.delegate = self
        self.addViewController(viewController)
        return viewController
    }()
    
    lazy var locationsViewController:LocationsTableViewController = {
        let storyboard = UIStoryboard.directory()
        let viewController = storyboard.instantiateViewController(withIdentifier: "LocationsTableViewController") as! LocationsTableViewController
        viewController.delegate = self
        self.addViewController(viewController)
        return viewController
    }()
    
    var isValidatingSearch:Bool = false {
        didSet {
            if isValidatingSearch {
                self.searchTextField.isEnabled = false
                self.validationImage.alpha = 1
                let rotateAnimation = CABasicAnimation(keyPath: "transform.rotation")
                rotateAnimation.fromValue = 0.0
                rotateAnimation.toValue = CGFloat(Float.pi * 2)
                rotateAnimation.duration = 1.0
                rotateAnimation.repeatCount = HUGE
                self.validationImage.layer.add(rotateAnimation, forKey: nil)
            } else {
                self.searchTextField.isEnabled = true
                self.validationImage.alpha = 0
                self.validationImage.layer.removeAllAnimations()
                self.validationImage.transform = CGAffineTransform.identity.rotated(by: 0)
            }
        }
    }
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = DirectoryInteractor()
        let presenter = DirectoryPresenter()
        let router = DirectoryRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
        router.filterDataStore = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        searchView.frame = CGRect(x: 0, y: 0, width: self.view.frame.width - 122, height: 31)
        searchTextField.delegate = self
        maxSuggestionsHeight = self.view.bounds.height
        suggestionsView.isHidden = true
        self.suggestionsView.addObserver(self, forKeyPath: ContentSizeName, options: .new, context: nil)
        updateChildViewController()
                getLocations()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        UIApplication.shared.statusBarStyle = .default
    }
    
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let pulley = segue.destination as? MainPulleyViewController {
            self.router?.routeToFilters(destinationVC: pulley)
        }
    }
    
    deinit {
        if let sugestions = self.suggestionsView {
            sugestions.removeObserver(self, forKeyPath: ContentSizeName)
        }
    }
    
    // MARK: Actions
    func getLocations() {
        let request = Directory.Locations.Request(searchTerms: self.searchTextField.text)
        IALoader.shared.show(LocalizableKeys.Loader.getLocations)
        interactor?.getLocations(request: request)
    }
    
    override func observeValue(forKeyPath keyPath: String?, of object: Any?, change: [NSKeyValueChangeKey : Any]?, context: UnsafeMutableRawPointer?) {
        guard keyPath == ContentSizeName else { return }
        guard let view = object as? UIView else { return }
        guard let constraint = view.getConstraint(identifier: "height") else { return }
        guard let contentSize = change?[.newKey] as? CGSize else { return }
        
        if contentSize.height > maxSuggestionsHeight {
            constraint.constant = maxSuggestionsHeight
        } else {
            constraint.constant =  contentSize.height
        }
    }
    
    @IBAction func textValueChanged(_ sender: UITextField) {
        if let text = searchTextField.text, text.count == 0 {
            self.suggestionsView.isHidden = true
            self.startTimers()
        }
    }
}

// MARK: - Manejo de boton de cambio de vista
extension DirectoryViewController {
    @IBAction func toogleChildViewController(_ sender: Any) {
        switch directoryViews {
        case .map:
            directoryViews = .list
        case .list:
            directoryViews = .map
        }
        updateChildViewController()
    }
    
    func updateChildViewController() {
        let imageName = self.directoryViews == .map ? "icoTableView" : "icoMapView"
        self.toogleViewButton.image = UIImage(named: imageName)
        
        self.mapViewController.view.alpha = self.directoryViews == .map ? 0 : 1
        self.locationsViewController.view.alpha = self.directoryViews == .list ? 0 : 1
        self.mapViewController.view.isHidden = false
        self.locationsViewController.view.isHidden = false
        
        UIView.animate(withDuration: 0.2, animations: {
            self.mapViewController.view.alpha = self.directoryViews == .map ? 1 : 0
            self.locationsViewController.view.alpha = self.directoryViews == .list ? 1 : 0
        }) { (complete) in
            self.mapViewController.view.isHidden = self.directoryViews != .map
            self.locationsViewController.view.isHidden = self.directoryViews != .list
        }
    }
    
    private func addViewController(_ viewController:UIViewController) {
        self.addChildViewController(viewController)
        self.containerView.addSubview(viewController.view)
        viewController.view.frame = self.containerView.bounds
        viewController.view.autoresizingMask = [.flexibleWidth, .flexibleHeight]
        
        viewController.didMove(toParentViewController: self)
    }
}

//MARK: - DirectoryDisplayLogic
extension DirectoryViewController: DirectoryDisplayLogic {
    func displayLocations() {
        IALoader.shared.hide()
        self.isValidatingSearch = false
        suggestionsView.isHidden = true
        if var dataStore = self.mapViewController.router?.dataStore {
            self.router?.passLocationData(to: &dataStore)
        }
        if var dataStore = self.locationsViewController.router?.dataStore {
            self.router?.passLocationData(to: &dataStore)
        }
    }
    
    func displaySearchSuggestion(_ suggestions: [String]) {
        IALoader.shared.hide()
        if isValidatingSearch {
            return
        }
        if suggestions.count == 0 {
            suggestionsView.isHidden = true
            return
        }
        self.suggestions = suggestions
        suggestionsView.isHidden = false
        suggestionsView.reloadData()
    }
    
    func displayLocationPermissionMessage() {
        IALoader.shared.hide()
        let alert = IABlurAlertController(title: nil, message: LocalizableKeys.General.noLocationServices, preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: LocalizableKeys.General.AlertOptions.cancel, style: .default, handler: { (action) in
            self.displayStateList()
        }))
        alert.addAction(UIAlertAction(title: LocalizableKeys.General.AlertOptions.accept, style: .default, handler: { (action) in
            if let appSettings = URL(string: UIApplicationOpenSettingsURLString) {
                UIApplication.shared.open(appSettings, options: [:], completionHandler: nil)
            }
        }))
        self.present(alert, animated: true, completion: nil)
    }
    
    func displayStateList() {
        IALoader.shared.hide()
        self.router?.goToStateList()
    }
}

//MARK: - DirectoryErrorDisplayLogic
extension DirectoryViewController: DirectoryErrorDisplayLogic {
    func displayError(ofType type: IAErrorAlertType) {
        IALoader.shared.hide()
        self.isValidatingSearch = false
        
        self.mapViewController.displayError(ofType: type)
        self.locationsViewController.displayError(ofType: type)
        
    }
}

//MARK: - DirectoryViewControllerDelegate
extension DirectoryViewController : DirectoryViewControllerDelegate {
    func reloadData() {
        self.getLocations()
    }
}

//MARK: - UITextFieldDelegate
extension DirectoryViewController : UITextFieldDelegate {
    func textFieldDidBeginEditing(_ textField: UITextField) {
        guard let searchTerms = self.searchTextField.text else { return }
        guard searchTerms.count >= 3 else { return }
        self.startTimers()
    }
    
    func textFieldDidEndEditing(_ textField: UITextField) {
        self.stopTimers()
    }
    
    
    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {
        self.suggestionsView.isHidden = true
        self.startTimers()
        return true
    }
    
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        textField.resignFirstResponder()
        if let _ = textField.text {
            self.mapViewController.bannerAlert.hide()
            self.locationsViewController.errorView.hide()
            self.isValidatingSearch = true
            self.suggestionsView.isHidden = true
            self.getLocations()
        }
        return false
    }
    
    func startTimers(){
        self.stopTimers()
        self.ildeTimer = Timer.scheduledTimer(withTimeInterval: 1.0, repeats: false, block: { [unowned self] timer in
            guard let searchTerms = self.searchTextField.text else { return }
            let request = Directory.LocationSearchSuggestions.Request(searchTerms: searchTerms)
            self.interactor?.getLocationSearchSuggestions(request: request)
        })
        
        self.ildeEmptyTimer = Timer.scheduledTimer(withTimeInterval: 2.0, repeats: false, block: { [unowned self] timer in
            guard let searchTerms = self.searchTextField.text else { return }
            if searchTerms.count == 0 {
                self.getLocations()
            }
        })
    }
    
    func stopTimers(){
        self.ildeTimer?.invalidate()
        self.ildeEmptyTimer?.invalidate()
    }
}

//MARK: - UITableViewDelegate
extension DirectoryViewController : UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return suggestions.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "cell") as! SuggestionCell
        cell.label?.text = suggestions[indexPath.row].capitalized
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        self.searchTextField.text = suggestions[indexPath.row].capitalized
        _ = self.textFieldShouldReturn(self.searchTextField)
    }
}
