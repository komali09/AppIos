//
//  DirectoryInteractor.swift
//  SegurosMtyiOS
//
//  Created by Erwin Perez Tellez on 05/12/17.
//  Copyright (c) 2017 Erwin Jonnatan Perez TÃ©llez. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import RxSwift

protocol DirectoryBusinessLogic {
    func getLocations(request: Directory.Locations.Request)
    func getLocationSearchSuggestions(request: Directory.LocationSearchSuggestions.Request)
}

protocol DirectoryDataStore {
    var locations: [Location] { get set }
    var isPlanIncludedOnly: Bool { get set }
}

class DirectoryInteractor: DirectoryBusinessLogic, DirectoryDataStore, FiltersDataStore {
    var presenter: (DirectoryPresentationLogic & ExpiredSessionPresentationLogic & ErrorPresentationLogic)?
    var worker: DirectoryWorker?
    
    // MARK: DataStore
    var locations: [Location] = []
    var selectedServices: [ServiceType] = [.hospital]
    var isFavoritesOnly: Bool = false
    var isPlanIncludedOnly: Bool = true
    var selectedState: State?
    var doctorTypes: [Specialty] = []
    
    var disposableBag: DisposeBag = DisposeBag()
    
    // MARK: Do something    
    func getLocations(request: Directory.Locations.Request) {
        if worker == nil {
            worker = DirectoryWorker()
        }
        guard let state = self.selectedState else {
            self.getState(request: request)
            return
        }
        if isFavoritesOnly {
            worker?.getFavoriteLocations(state: state.id).subscribe(locationEventHandler(_:)).disposed(by: self.disposableBag)
        } else {
            worker?.getLocations(isPlanIncluded: isPlanIncludedOnly, serviceTypes: selectedServices, state: state.id, doctorTypes: doctorTypes, searchTerms: request.searchTerms).subscribe(locationEventHandler(_:)).disposed(by: self.disposableBag)
        }
    }
    
    private func locationEventHandler(_ event: Event<[Location]>) {
        switch event {
        case .next(let result):
            self.locations = result
            self.presenter?.presentLocations()
        case .error(let error):
            switch error {
            case NetworkingError.unauthorized:
                self.presenter?.presentExpiredSession()
            default:
                self.presenter?.presentError(error)
            }
        default:
            break
        }
    }
    
    func getState(request: Directory.Locations.Request) {
        LocationManager.shared.getState().take(1).subscribe({ [weak self] event in
            switch event {
            case .next(let state):
                self?.selectedState = state
                self?.getLocations(request: request)
            case .error(let error):
                switch error {
                case NetworkingError.unauthorized:
                    self?.presenter?.presentExpiredSession()
                default:
                    self?.presenter?.presentError(error)
                }
            default:
                break
            }
        }).disposed(by: self.disposableBag)
    }
    
    func getLocationSearchSuggestions(request: Directory.LocationSearchSuggestions.Request) {
        guard request.searchTerms.count >= 3 ,
            let state = self.selectedState else {
            self.presenter?.presentSearchSuggestion([])
            return
        }
        
        if worker == nil {
            worker = DirectoryWorker()
        }
        
        worker?.getLocationSearchSuggestions(searchTerms: request.searchTerms, state: state.id).subscribe({ [weak self] event in
            switch event {
            case .next(let results):
                if results.count > 0 {
                    self?.presenter?.presentSearchSuggestion(results)
                }
            default:
                break
            }
        }).disposed(by: self.disposableBag)
    }
}
