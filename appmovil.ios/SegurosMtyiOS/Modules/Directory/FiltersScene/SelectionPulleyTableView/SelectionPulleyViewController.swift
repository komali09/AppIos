//
//  SelectionPulleyViewController.swift
//  SegurosMtyiOS
//
//  Created by Erwin Jonnatan Perez Téllez on 20/12/17.
//  Copyright (c) 2017 IA Interactive. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Pulley

/**
 enum para saber que tipo de tabla se esta utilizando
 */
enum typeSelectionFilters {
    case none
    case states
    case specialities
}

protocol SelectionPulleyDisplayLogic: class {
    func displayStates(viewModel: SelectionPulley.States.ViewModel)
    func displayFilteredStates(viewModel: SelectionPulley.FilterStates.ViewModel)
    func displaySpecialities(viewModel: SelectionPulley.DoctorSpecialities.ViewModel)
    func displayFilteredSpecialities(viewModel: SelectionPulley.FilterSpecialities.ViewModel)
    func displayViewNoInternet()
}


/**
 Clase que desplegable que muestra los estados o especialides de doctores en filtros de Directorio
 */
class SelectionPulleyViewController: UIViewController, ExpiredSessionDisplayLogic, ErrorDisplayLogic {
    var interactor: SelectionPulleyBusinessLogic?
    var router: (NSObjectProtocol & SelectionPulleyRoutingLogic & SelectionPulleyDataPassing)?
    
    @IBOutlet weak var closeButton: UIButton!
    @IBOutlet weak var titleView: UILabel!
    @IBOutlet weak var subTitleView: UILabel!
    @IBOutlet weak var searchBar: UISearchBar!
    @IBOutlet weak var tableView: UITableView!
    
    let cellIdentifierState = "stateTableViewCell"
    let cellIdentifierSpecialty = "specialityCell"
    
    var typeSelection: typeSelectionFilters = .none
    
    var routerNoInternet: Bool = false
    
    var states: [State]? {
        didSet {
            self.tableView.reloadData()
        }
    }
    
    var specialities: [Specialty]? {
        didSet {
            self.tableView.reloadData()
        }
    }
    
    var selectedState: State? {
        didSet {
            self.tableView.reloadData()
            self.router?.dataStore?.selectedState = self.selectedState
        }
    }
    
    var specialitiesSelected = [Specialty]() {
        didSet {
            self.tableView.reloadData()
        }
    }
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = SelectionPulleyInteractor()
        let presenter = SelectionPulleyPresenter()
        let router = SelectionPulleyRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.searchBar.delegate = self
        self.setupTableView()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        if let _ = self.presentingViewController {
            self.view.backgroundColor = UIColor.smLightGray
            self.closeButton.isHidden = true
        }
        
        if routerNoInternet {
            self.typeSelection = .states
            setupUI()
            self.loadStates()
        }
    }
    
    private func setupTableView() {
        self.tableView.delegate = self
        self.tableView.dataSource = self
        
        switch self.typeSelection {
        case .states:
            self.tableView.allowsMultipleSelection = false
        default:
            self.tableView.allowsMultipleSelection = true
        }
        
        setupUI()
    }
    
    private func setupUI() {
        switch self.typeSelection {
        case .states:
            self.titleView.text = "Selecciona un estado"
            self.subTitleView.text = "(sólo México)"
            self.searchBar.placeholder = "Estado"
        default:
            self.titleView.text = "Agregar especialidad"
            self.subTitleView.text = "(selecciona sólo 5)"
            self.searchBar.placeholder = "Especialidad"
        }
    }
    
    // MARK: Do something
    func loadData(by type: typeSelectionFilters) {
        self.typeSelection = type
        
        switch self.typeSelection {
        case .states:
            setupUI()
            loadStates()
        default:
            setupUI()
            loadSpecialities()
        }
    }
    
    func loadStates() {
        IALoader.shared.show(LocalizableKeys.Loader.getStates)
        self.typeSelection = .states
        interactor?.getStates()
    }
    
    func loadSpecialities() {
        IALoader.shared.show(LocalizableKeys.Loader.getSpecialities)
        self.typeSelection = .specialities
        interactor?.getDoctorSpecialities()
    }
    
    func setDataStates(states: [State]) {
        self.states = states
    }
    
    private func closeView() {
        if let pulley = self.parent as? MainPulleyViewController {
            pulley.hideSelectionOptionsTableView()
        }
    }
    
    func setDataSpecialities(specialities: [Specialty]) {
        self.specialities = specialities
    }
    
    @IBAction func closePressed(_ sender: Any) {
       self.closeView()
    }
    
    @IBAction func addItemsSelected(_ sender: Any) {
        if self.typeSelection == .states {
            if self.selectedState == nil {
                return
            }
        } else {
            if self.specialitiesSelected.count == 0 {
                return
            }
        }
        
        switch self.typeSelection {
        case .states:
            if let pulley = self.parent as? MainPulleyViewController {
                pulley.addFiltersFromSelectionPulley(type: .states, state: self.selectedState, specialities: nil)
            } else if let _ = self.presentingViewController {
                IALoader.shared.show(LocalizableKeys.Loader.getLocations)
                self.router?.passDataToDirecory()
                self.dismiss(animated: true, completion: nil)
            }
            
            
        default:
            if let pulley = self.parent as? MainPulleyViewController {
                pulley.addFiltersFromSelectionPulley(type: .specialities, state: nil, specialities: self.specialitiesSelected)
            }
        }
    }
}

/**
    Métodos del procotol de comunicación del presenter al viewcontroller
 */
extension SelectionPulleyViewController: SelectionPulleyDisplayLogic {
    func displayStates(viewModel: SelectionPulley.States.ViewModel) {
        IALoader.shared.hide()
        self.tableView.isHidden = false
        setDataStates(states: viewModel.states)
    }
    
    func displayFilteredStates(viewModel: SelectionPulley.FilterStates.ViewModel) {
        IALoader.shared.hide()
        self.tableView.isHidden = false
        self.setDataStates(states: viewModel.states)
    }
    
    func displayFilteredSpecialities(viewModel: SelectionPulley.FilterSpecialities.ViewModel) {
        IALoader.shared.hide()
        self.tableView.isHidden = false
        self.setDataSpecialities(specialities: viewModel.specialities)
    }
    
    func displaySpecialities(viewModel: SelectionPulley.DoctorSpecialities.ViewModel) {
        IALoader.shared.hide()
        self.tableView.isHidden = false
        setDataSpecialities(specialities: viewModel.specialities)
    }
    
    func displayViewNoInternet() {
        self.tableView.isHidden = true
        IALoader.shared.hide()
        
        OperationQueue.main.addOperation {
             self.closeView()
             self.showAlert(with: nil, message: LocalizableKeys.General.noInternet, actionTitle: LocalizableKeys.General.AlertOptions.accept, action: nil)
        }
    }
}

// MARK: - UITableViewController delegate
/*
 Protocolo para definir el número de secciones y filas den la tabla
 */
extension SelectionPulleyViewController: UITableViewDelegate, UITableViewDataSource {
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        switch self.typeSelection {
        case .states:
            return self.states?.count ?? 0
        default:
            return self.specialities?.count ?? 0
        }
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        switch self.typeSelection {
        case .states:
            let cellDefault = tableView.dequeueReusableCell(withIdentifier: cellIdentifierState, for: indexPath)
            guard let cell = cellDefault as? StateTableViewCell else {
                return cellDefault
            }
            
            if let selectedState = self.selectedState {
                if self.states![indexPath.row].id == selectedState.id {
                    cell.configureCell(state: self.states![indexPath.row], isSelected: true)
                } else {
                    cell.configureCell(state: self.states![indexPath.row], isSelected: false)
                }
            } else {
                cell.configureCell(state: self.states![indexPath.row], isSelected: false)
            }
            
            cell.selectionStyle = .none
            
            return cell
        default:
            
            let cell = tableView.dequeueReusableCell(withIdentifier: cellIdentifierSpecialty, for: indexPath)
          
            cell.textLabel?.text = self.specialities![indexPath.row].name
            
            if self.specialitiesSelected.contains(where: { (speciality) -> Bool in
                return speciality.id == self.specialities![indexPath.row].id
            }) {
                cell.accessoryType = .checkmark
            } else {
                cell.accessoryType = .none
            }
            
            cell.selectionStyle = .none
            
            return cell
        }
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        switch self.typeSelection {
        case .states:
            if let stateSelected = self.selectedState {
                if self.states![indexPath.row].id != stateSelected.id {
                    self.selectedState = self.states![indexPath.row]
                }
            } else {
                self.selectedState = self.states![indexPath.row]
            }
        default:
            if self.specialitiesSelected.contains(where: { (speciality) -> Bool in
                return speciality.id == self.specialities![indexPath.row].id
            }) {
                let index = self.specialitiesSelected.index(where: { (speciality) -> Bool in
                    return speciality.id == self.specialities![indexPath.row].id
                })
                
                self.specialitiesSelected.remove(at: index!)
            } else {
                if self.specialitiesSelected.count == 5 { // se puede seleccionar hasta 5 especialidades
                    return
                }
                self.specialitiesSelected.append(self.specialities![indexPath.row])
            }
        }
    }
}

// MARK: - UISearchbar delegate
/**
    Métodos de la interacción con el searchbar
 */
extension SelectionPulleyViewController: UISearchBarDelegate {
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        interactor?.filterItems(by: searchText)
        
        if let drawerVC = self.parent as? PulleyViewController {
            drawerVC.setDrawerPosition(position: .open, animated: true)
        }
        
    }
}
