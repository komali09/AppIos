//
//  SelectionPulleyPresenter.swift
//  SegurosMtyiOS
//
//  Created by Erwin Jonnatan Perez TÃ©llez on 20/12/17.
//  Copyright (c) 2017 IA Interactive. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

protocol SelectionPulleyPresentationLogic {
    func presentStates(response: SelectionPulley.States.Response)
    func presentFilteredStates(response: SelectionPulley.FilterStates.Response)
    func presentSpecialities(response: SelectionPulley.DoctorSpecialities.Response)
    func presentFilteredSpecialities(response: SelectionPulley.FilterSpecialities.Response)
}

class SelectionPulleyPresenter: SelectionPulleyPresentationLogic {
    weak var viewController: (SelectionPulleyDisplayLogic & ErrorDisplayLogic & ExpiredSessionDisplayLogic)?
    
    // MARK: Do something
    
    /**
     Asigna el arreglo obtenido del servicio al viewModel
     */
    func presentStates(response: SelectionPulley.States.Response) {
        
        let viewModel = SelectionPulley.States.ViewModel(states: response.states)
        viewController?.displayStates(viewModel: viewModel)
    }
    
    /**
     Asigna al viewModel el arreglo de estados filtrados de la busqueda por nombre
     */
    func presentFilteredStates(response: SelectionPulley.FilterStates.Response) {
        let viewModel = SelectionPulley.FilterStates.ViewModel(states: response.states)
        viewController?.displayFilteredStates(viewModel: viewModel)
    }
    
    /**
     Asigna el arreglo obtenido del servicio al viewModel
     */
    func presentSpecialities(response: SelectionPulley.DoctorSpecialities.Response) {
        let viewModel = SelectionPulley.DoctorSpecialities.ViewModel(specialities: response.specialities)
        viewController?.displaySpecialities(viewModel: viewModel)
    }
    
    /**
     Asigna al viewModel el arreglo de especialidades filtradas de la busqueda por nombre
     */
    func presentFilteredSpecialities(response: SelectionPulley.FilterSpecialities.Response) {
        let viewModel = SelectionPulley.FilterSpecialities.ViewModel(specialities: response.specialities)
        viewController?.displayFilteredSpecialities(viewModel: viewModel)
    }
}


extension SelectionPulleyPresenter : ErrorPresentationLogic {
    func presentError(_ error:Error) {
        var message: String = ""
        switch error {
        case NetworkingError.noInternet:
            self.viewController?.displayViewNoInternet()
        default:
            message = LocalizableKeys.General.noInternet
            self.viewController?.displayError(with: message)
        }
        
    }
}

extension SelectionPulleyPresenter : ExpiredSessionPresentationLogic {
    func presentExpiredSession() {
        self.viewController?.displayExpiredSession()
    }
}
