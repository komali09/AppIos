//
//  FiltersViewController.swift
//  SegurosMtyiOS
//
//  Created by Erwin Jonnatan Perez Téllez on 18/12/17.
//  Copyright (c) 2017 IA Interactive. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol FiltersDisplayLogic: class {
    
}

class FiltersViewController: UIViewController, FiltersDisplayLogic {
    var interactor: FiltersBusinessLogic?
    var router: (NSObjectProtocol & FiltersRoutingLogic & FiltersDataPassing)?
    
    @IBOutlet weak var constraintHeightSpecialities: NSLayoutConstraint!
    @IBOutlet weak var constraintHeightServices: NSLayoutConstraint!
    @IBOutlet weak var constraintBottomServices: NSLayoutConstraint!
    @IBOutlet weak var scrollView: UIScrollView!
    @IBOutlet weak var contentView: UIView!
    
    //MARK: Sections
    @IBOutlet weak var favorites: UIView!
    @IBOutlet weak var planIncluded: UIView!
    @IBOutlet weak var location: UIView!
    @IBOutlet weak var doctors: UIView!
    @IBOutlet weak var specialities: UIView!
    @IBOutlet weak var ask: UIView!
    @IBOutlet weak var services: UIView!
    
    //MARK: Favorites
    @IBOutlet weak var switchFavorite: UISwitch!
    
    //MARK: Plan included
    @IBOutlet weak var tooltip: UIView!
    @IBOutlet weak var infoTooltip: UIButton!
    @IBOutlet weak var switchPlanIncluded: UISwitch!
    
    //MARK: State
    @IBOutlet weak var addState: IAGradientButton!
    
    //MARK: Specialities
    var specialitiesCollectionViewController: SpecialtiesCollectionViewController?
    
    //MARK: Services
    var servicesCollectionViewController: ServicesCollectionViewController?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = FiltersInteractor()
        let presenter = FiltersPresenter()
        let router = FiltersRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        NotificationCenter.default.addObserver(self, selector: #selector(updateCollectionHeight(notification:)), name: .collectionViewHeight, object: nil)
        setupUI()
    }

    deinit {
        NotificationCenter.default.removeObserver(self)
    }
    
    private func setupUI() {
        self.constraintHeightSpecialities.constant = 0
        self.view.layoutIfNeeded()
        
        self.infoTooltip.adjustsImageWhenHighlighted = false
        
        if servicesCollectionViewController == nil {
            servicesCollectionViewController = self.childViewControllers.first(where: { $0 is ServicesCollectionViewController}) as? ServicesCollectionViewController
            servicesCollectionViewController?.delegate = self
        }
        
        if specialitiesCollectionViewController == nil {
            specialitiesCollectionViewController = self.childViewControllers.first(where: { $0 is SpecialtiesCollectionViewController}) as? SpecialtiesCollectionViewController
        }
        
        /*
         Precarga de filtros
        */
        if let isFavorite = self.router?.dataStore?.isFavoritesOnly {
            self.switchFavorite.isOn = isFavorite
            
            if isFavorite {
                self.disableSettingsForFavorites()
            }
        }
        
        if let isPlanIncluded = self.router?.dataStore?.isPlanIncludedOnly {
            self.switchPlanIncluded.isOn = isPlanIncluded
        }
        
        if let state = self.router?.dataStore?.selectedState {
            self.setTitleButtonAndBorderBlue(title: state.name)
        }

        constraintHeightServices.constant = servicesCollectionViewController!.collectionView!.contentSize.height + 10.0
        specialitiesCollectionViewController?.setupCollectionView(specialities: (self.router?.dataStore?.doctorTypes)!)
        
        if let services = self.router?.dataStore?.selectedServices {
            self.servicesCollectionViewController?.preloadCollectionView(with: services)
        }
    }

    // MARK: - Actions
    @IBAction func closePressed(_ sender: Any) {
        self.dismiss(animated: true, completion: nil)
    }
    
    @IBAction func showSelectionStates(_ sender: Any) {
        if let pulley = self.parent as? MainPulleyViewController {
            let state = self.router?.dataStore?.selectedState
            pulley.showSelectionOptionsTableView(selectedState: state, show: false)
        }
    }
    
    @IBAction func showSelectionSpecialties(_ sender: Any) {
        if let pulley = self.parent as? MainPulleyViewController {
            let specialities = self.specialitiesCollectionViewController?.items
            pulley.showSelectionOptionsTableView(specialitiesSelected: specialities, show: false)
        }
    }
    
    @IBAction func cleanFiltersPressed(_ sender: Any) {
        self.router?.dataStore?.isFavoritesOnly = false
        self.router?.dataStore?.isPlanIncludedOnly = false
        self.router?.dataStore?.selectedState = nil
        self.setTitleButtonAndBorderClear()
        self.router?.dataStore?.doctorTypes = []
        self.router?.dataStore?.selectedServices = []
        self.setupUI()
    }
    
    @IBAction func saveFiltersPressed(_ sender: Any) {
        self.router?.routeToDirectory()
        
        guard let tabBarController = self.presentingViewController as? UITabBarController else { return }
        guard let navigationController = tabBarController.selectedViewController as? UINavigationController else { return }
        guard let viewController = navigationController.viewControllers.first as? DirectoryViewController else { return }
        
        viewController.getLocations()
    }

    // MARK: Do something
    @objc private func updateCollectionHeight(notification: NSNotification) {
        if let height = notification.object as? CGFloat {
            constraintHeightSpecialities.constant = height == 0.00 ? 0.00 : height + 15.00
            view.layoutSubviews()
            self.scrollView.contentSize = CGSize(width: self.contentView.frame.size.width, height: self.contentView.frame.size.height + constraintHeightSpecialities.constant)
        }
        
        if let specialities = notification.userInfo?["specialities"] as? [Specialty] {
           self.router?.dataStore?.doctorTypes = specialities
        }
    }

  
}

/**
 Extensión donde se encuentran los métodos de la vista de Favoritos
 */
extension FiltersViewController {
    private func enableSettingsForFavorites() {
        self.planIncluded.isUserInteractionEnabled = true
        self.planIncluded.alpha = 1.0
        self.doctors.isUserInteractionEnabled = true
        self.doctors.alpha = 1.0
        self.specialities.isUserInteractionEnabled = true
        self.specialities.alpha = 1.0
        self.ask.isUserInteractionEnabled = true
        self.ask.alpha = 1.0
        self.services.isUserInteractionEnabled = true
        self.services.alpha = 1.0
    }
    
    private func disableSettingsForFavorites() {
        self.planIncluded.isUserInteractionEnabled = false
        self.planIncluded.alpha = 0.5
        self.doctors.isUserInteractionEnabled = false
        self.doctors.alpha = 0.5
        self.specialities.isUserInteractionEnabled = false
        self.specialities.alpha = 0.5
        self.ask.isUserInteractionEnabled = false
        self.ask.alpha = 0.5
        self.services.isUserInteractionEnabled = false
        self.services.alpha = 0.5
    }
    
    @IBAction func isOnlyFavoritesChangedValue(_ sender: UISwitch) {
        self.router?.dataStore?.isFavoritesOnly = sender.isOn
        
        if sender.isOn {
            disableSettingsForFavorites()
        } else {
            enableSettingsForFavorites()
        }
    }
}

/**
 Extensión donde se encuentran los métodos de la vista de plan incluido
 */
extension FiltersViewController {
    @IBAction func showTooltip(_ sender: UIButton) {
        if sender.tag == 0 {
            self.tooltip.isHidden = false
            sender.tag = 1
        } else {
            self.tooltip.isHidden = true
            sender.tag = 0
        }
    }
    
    @IBAction func isPlanIncludedChangeCalue(_ sender: UISwitch) {
        self.router?.dataStore?.isPlanIncludedOnly = sender.isOn
    }
}

/**
 Extensión donde se encuentran los métodos de la vista de Estado
 */
extension FiltersViewController {
    func addStateFilter(state: State) {
        self.setTitleButtonAndBorderBlue(title: state.name)
        self.router?.dataStore?.selectedState = state
    }
    
    func addSpecialitiesFilter(specialities: [Specialty]) {
        specialitiesCollectionViewController?.setupCollectionView(specialities: specialities)
        self.router?.dataStore?.doctorTypes = specialities
    }
    
    func setTitleButtonAndBorderBlue(title: String) {
        self.addState.setTitle(title, for: .normal)
        self.addState.borderColor = UIColor.smBlueLight
    }
    
    func setTitleButtonAndBorderClear() {
        self.addState.setTitle("Agregar ubicación", for: .normal)
        self.addState.borderColor = UIColor.clear
    }
}

/**
 Extensión donde se encuentran los métodos de la vista de servicios
 */
extension FiltersViewController : ServicesCollectionViewControllerDelegate {
    func collectionChanged(_ collection: ServicesCollectionViewController, selectedItems: [ServiceType]) {
        self.router?.dataStore?.selectedServices = selectedItems
    }
}


