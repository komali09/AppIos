//
//  FormScenePresenter.swift
//  SegurosMtyiOS
//
//  Created by Claudia Mariana Parente Ramos on 18/01/18.
//  Copyright (c) 2018 IA Interactive. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

protocol FormScenePresentationLogic {
    func presentMessageForValidatingPassword(validationState: TextFieldValidationState)
    func presentMessageForRepeatPassword(validationState: TextFieldValidationState)
    func presentMessageForValidatingName(validationState: TextFieldValidationState, type: TypeName)
    func presentMessageForMail(validationState: TextFieldValidationState)
    func presentMessageForPhone(validationState: TextFieldValidationState)
    func presentMessageForDate(validationState: TextFieldValidationState)
    func presentRegisterSuccess()
}

class FormScenePresenter: FormScenePresentationLogic {
    weak var viewController: (FormSceneDisplayLogic & ErrorDisplayLogic)?
    
    // MARK: Do something

    func presentMessageForValidatingPassword(validationState: TextFieldValidationState) {
        viewController?.dsiplayMessagePassword(validationState)
    }
    
    func presentMessageForRepeatPassword(validationState: TextFieldValidationState) {
        viewController?.dsiplayMessagePasswordValidate(validationState)
    }
    
    func presentMessageForValidatingName(validationState: TextFieldValidationState, type: TypeName){
        viewController?.dsiplayMessageName(validationState, type: type)
    }
    
    func presentMessageForMail(validationState: TextFieldValidationState) {
        viewController?.dsiplayMessageMail(validationState)
    }
    
    func presentMessageForPhone(validationState: TextFieldValidationState) {
        viewController?.dsiplayMessagePhone(validationState)
    }
    
    func presentMessageForDate(validationState: TextFieldValidationState) {
        viewController?.dsiplayMessageDate(validationState)
    }
    
    func presentRegisterSuccess() {
        self.viewController?.displayRegisterSuccess()
    }
    
}
extension FormScenePresenter : ErrorPresentationLogic {
    func presentError(_ error:Error) {
        switch error {
        case NetworkingError.noInternet:
            self.viewController?.displayError(with: LocalizableKeys.General.noInternet)
        case NetworkingError.noSuccessStatusCode(let code, _ ):
            switch code {
            case 1:
                self.viewController?.displayError(with: LocalizableKeys.Register.invalidData)
            case 5:
                self.viewController?.displayError(with: LocalizableKeys.Register.invalidPhone)
            default:
                self.viewController?.displayError(with: LocalizableKeys.Register.serviceError)
            }
        default:
            self.viewController?.displayError(with: LocalizableKeys.Register.serviceError)
        }
    }
}
