//
//  FiltersWorker.swift
//  SegurosMtyiOS
//
//  Created by Erwin Jonnatan Perez Téllez on 18/12/17.
//  Copyright (c) 2017 IA Interactive. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import RxSwift

class FiltersWorker {
    /**
     Realiza la peticion al servicio para obtener las locaciones cercanas al usuario
     */
    func getStates()-> Observable<[State]> {
        return Observable.create { observable in
            let disposable = ServiceManager.getStates().subscribe { event in
                switch event {
                case .next(let result):
                    if result.count == 0 {
                        observable.onError(LocationError.noResults)
                    } else {
                        observable.onNext(result)
                    }
                case .error(let error):
                    observable.onError(error)
                case .completed:
                    break
                }
            }
            return Disposables.create {
                disposable.dispose()
            }
        }
    }
    
    
    /**
     Realiza la búsqueda en un arreglo de estados, donde se busca obtener los estados que contentan un string
     
     - Parameters:
     - searchText: string a buscr si lo contiene los nombres de los estados
     - states: arreglos de objetos tipo State
     */
    func filterStates(by searchText: String, states: [State]) -> [State] {
        if searchText == "" {
            return states
        }
        
        let statesFiltered = states.filter { (state) -> Bool in
            return state.name.lowercased().contains(searchText.lowercased())
        }
        
        return statesFiltered
    }
    
    /**
     Realiza la peticion al servicio para obtener las especialidades de doctores
     */
    func getDoctorSpecialities()-> Observable<[Specialty]> {
        return Observable.create { observable in
            let disposable = ServiceManager.getDoctorSpecialities().subscribe { event in
                switch event {
                case .next(let result):
                    if result.count == 0 {
                        observable.onError(LocationError.noResults)
                    } else {
                        observable.onNext(result)
                    }
                case .error(let error):
                    observable.onError(error)
                case .completed:
                    break
                }
            }
            return Disposables.create {
                disposable.dispose()
            }
        }
    }
    
    /**
     Realiza la búsqueda en un arreglo de especialidades de doctores, donde se busca obtener los estados que contentan un string
     
     - Parameters:
     - searchText: string a buscr si lo contiene los nombres de los estados
     - specialties: arreglos de objetos tipo Specialty
     */
    func filterSpecialities(by searchText: String, specialties: [Specialty]) -> [Specialty] {
        if searchText == "" {
            return specialties
        }
        
        let statesFiltered = specialties.filter { (specialty) -> Bool in
            return specialty.name.lowercased().contains(searchText.lowercased())
        }
        
        return statesFiltered
    }
}
