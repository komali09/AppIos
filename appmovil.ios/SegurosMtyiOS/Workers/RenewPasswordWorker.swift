//
//  RenewPasswordWorker.swift
//  SegurosMtyiOS
//
//  Created by Erwin Perez Tellez on 09/12/17.
//  Copyright (c) 2017 IA Interactive. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import RxSwift
import SwiftyRSA

class RenewPasswordWorker {
    /**
     Realiza la validación para saber si son iguales el password y la confirmación
     - parameter password: contraseña válida
     - parameter confirmPassword: contraseña que tiene que ser igual ala primera (password)
     */
    func validPasswords(_ password:String, confirmPassword: String) -> TextFieldValidationState {
        if password == confirmPassword {
            return .valid(message: "")
        } else {
            return .invalid(message: LocalizableKeys.RenewPassword.notSamePasswords)
        }
    }
    
    /**
     Realiza la petición para asignar una nueva contraseña a la cuenta
     - parameter phoneNumber: Número de teléfono del usuario
     - parameter passsword: contraseña del usuario
     */
    func renewPassword(_ phoneNumber:String, password: String, smsCode: String, timestamp: Int?) -> Observable<Bool> {
        if password.isEmpty {
            return Observable.error(WorkerError.noInput)
        }
        let timestamp = timestamp ?? Int(Date().timeIntervalSince1970) * 1000
        guard let totpCode = CryptoManager.generateTOTP(for: smsCode, timestamp: UInt64(timestamp)) else { return Observable.error(WorkerError.invalidInput) }
        guard let encryptedPassword = CryptoManager.rsaString(publicKey: UserDefaultsManager.shared.publicKeyToCipherRSA, value: password) else { return Observable.error(WorkerError.invalidInput) }
        
        return Observable.create { observable in
            IALoader.shared.show(LocalizableKeys.Loader.renewPassword)
            let disposable = ServiceManager.renewPassword(phoneNumber: phoneNumber, password: encryptedPassword, smsCode: smsCode, totpCode: totpCode).subscribe { event in
                switch event {
                case .next(let result):
                    observable.onNext(result)
                case .error(let error):
                    observable.onError(error)
                case .completed:
                    break
                }
            }
            return Disposables.create {
                disposable.dispose()
            }
        }
    }
}
