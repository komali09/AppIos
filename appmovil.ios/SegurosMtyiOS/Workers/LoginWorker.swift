//
//  LoginWorker.swift
//  SegurosMtyiOS
//
//  Created by Isidro Adan Garcia Solorio  on 12/1/17.
//  Copyright (c) 2017 IA Interactive. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import RxSwift
import SwiftyRSA

enum LoginError:Error {
    case unsuccessfulLogin(status:LoginStatus)
}
class LoginWorker {
    /**
     Realiza la peticion al servicio para validar el numero telefonico utilizado para iniciar sesión
     - parameter phoneNumber: Número de teléfono a validar.
     */
    func validatePhoneNumber(_ phoneNumber:String) -> Observable<ValidateNumberResponse> {
        if phoneNumber.isEmpty {
            return Observable.error(WorkerError.noInput)
        } else if phoneNumber.count < 10 {
            return Observable.error(WorkerError.invalidInput)
        } else {
            return Observable.create { observable in
                let disposable = ServiceManager.validateNumber(phoneNumber: phoneNumber).subscribe { event in
                    switch event {
                    case .next(let result):
                        UserDefaultsManager.shared.publicKeyToCipherRSA = result.publicKey
                        observable.onNext(result)
                    case .error(let error):
                        observable.onError(error)
                    case .completed:
                        break
                    }
                }
                return Disposables.create {
                    disposable.dispose()
                }
            }
        }
    }
    
    /**
     Realiza la validación de la contraseña utilizada para iniciar sesión
     - parameter password: contraseña a validar.
     */
    func validatePassword(_ password:String) -> TextFieldValidationState {
        if password.isEmpty {
            return .invalid(message: LocalizableKeys.Login.emptyPassword)
        }
        if Util.validatePassword(password) {
            return .valid(message: "")
        } else {
            return .invalid(message: LocalizableKeys.Login.invalidPassword)
        }
    }
    
    /**
     Realiza la peticion al servicio para iniciar sesión
     - parameter phoneNumber: Número de teléfono.
     - parameter password: Contraseña del usuario
     */
    func login(phoneNumber:String, password: String) -> Observable<UserInfo> {
        if phoneNumber.isEmpty || phoneNumber.count < 10 ||
            password.isEmpty || !Util.validatePassword(password) {
            return Observable.error(WorkerError.invalidInput)
        }
        
        guard let encryptedPassword = CryptoManager.rsaString(publicKey: UserDefaultsManager.shared.publicKeyToCipherRSA, value: password) else { return Observable.error(WorkerError.noPublicKey) }
            
        return Observable.create { observable in
            let disposable = ServiceManager.login(phoneNumber: phoneNumber, password: encryptedPassword).subscribe { event in
                switch event {
                case .next(let result):
                    observable.onNext(result)
                case .error(let error):
                    let status = self.getLoginErrorStatus(with: error)
                    observable.onError(LoginError.unsuccessfulLogin(status: status))
                case .completed:
                    break
                }
            }
            return Disposables.create {
                disposable.dispose()
            }
        }
    }
    
    private func getLoginErrorStatus(with error:Error) -> LoginStatus {
        var status: LoginStatus = .other(message: LocalizableKeys.General.serviceError)
        switch error {
        case NetworkingError.noSuccessStatusCode(let code, let body):
            switch code {
            case 1, 2: // Contraseña incorrecta
                if let attemptsLeft = body.rattempts {
                    status = .invalidPassword(reattempsLeft: attemptsLeft, message: String(format: LocalizableKeys.Login.invalidLoginPassword, attemptsLeft))
                }
            case 3: // No password en bd
                status = .recoverPassword(type: .new, message: LocalizableKeys.Login.needsResetPassword)
            case 4: // Cuenta bloqueada
                status = .other(message: LocalizableKeys.Login.bannedAccount)
            case 5, 7: // Logueado en otro device
                status = .other(message: LocalizableKeys.Login.alreadyLoggedIn)
            case 6:  // Cuenta inactiva
                status = .activateAccount(message: LocalizableKeys.Login.inactiveAccount)
            case 8: // Cuenta desactivada
                status = .recoverPassword(type: .reset, message: LocalizableKeys.Login.deactivatedAccount)
            default:
                break
            }
        default:
            break
        }
        return status
    }
    
    func saveLoggedInUser(response: UserInfo, phoneNumber:String) {
        var userInfo = response
        userInfo.removeTokenFormResponse()
        UserDefaultsManager.shared.userInfo = userInfo
        KeychainManager.shared.phoneNumber = phoneNumber
    }
    
    
    func logout() {
        
    }
}
